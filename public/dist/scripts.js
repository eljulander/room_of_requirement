"use strict";var config={apiKey:"AIzaSyCRfRp20kEkpwO1Bs30sDyBkC4Qf-rsuNM",authDomain:"course-file-auditor.firebaseapp.com",databaseURL:"https://course-file-auditor.firebaseio.com",storageBucket:"course-file-auditor.appspot.com"};firebase.initializeApp(config);var database=firebase.database(),provider=new firebase.auth.GoogleAuthProvider;
"use strict";function toggleSignIn(){if(firebase.auth().currentUser)firebase.auth().signOut();else{var e=new firebase.auth.GoogleAuthProvider;e.addScope("https://www.googleapis.com/auth/plus.login"),e.addScope("profile"),e.addScope("email"),firebase.auth().signInWithRedirect(e)}document.getElementById("quickstart-sign-in").disabled=!0}function initApp(){firebase.auth().getRedirectResult().then(function(e){if(e.credential){var i=e.credential.accessToken;console.log(i)}else console.log("token null");e.user})["catch"](function(e){var i=e.code;e.message,e.email,e.credential;"auth/account-exists-with-different-credential"===i?alert("You have already signed up with a different auth provider for that email."):console.error(e)}),firebase.auth().onAuthStateChanged(function(e){e?(displayName=e.displayName,email=e.email,emailVerified=e.emailVerified,photoURL=e.photoURL,isAnonymous=e.isAnonymous,uid=e.uid,refreshToken=e.refreshToken,providerData=e.providerData,document.getElementById("quickstart-sign-in").textContent="Sign out",database.ref("users/"+uid).update({displayName:displayName,email:email,emailVerified:emailVerified,photoURL:photoURL,isAnonymous:isAnonymous,uid:uid,refreshToken:refreshToken,providerData:providerData})):document.getElementById("quickstart-sign-in").textContent="Sign in with Google",document.getElementById("quickstart-sign-in").disabled=!1}),document.getElementById("quickstart-sign-in").addEventListener("click",toggleSignIn,!1)}var displayName,email,emailVerified,photoURL,isAnonymous,uid,refreshToken,providerData;$(document).ready(function(){initApp()});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbmZpZy5qcyIsImxvZ2luLmpzIl0sIm5hbWVzIjpbImNvbmZpZyIsImFwaUtleSIsImF1dGhEb21haW4iLCJkYXRhYmFzZVVSTCIsInN0b3JhZ2VCdWNrZXQiLCJmaXJlYmFzZSIsImluaXRpYWxpemVBcHAiLCJkYXRhYmFzZSIsInByb3ZpZGVyIiwiYXV0aCIsIkdvb2dsZUF1dGhQcm92aWRlciIsInRvZ2dsZVNpZ25JbiIsImN1cnJlbnRVc2VyIiwic2lnbk91dCIsImFkZFNjb3BlIiwic2lnbkluV2l0aFJlZGlyZWN0IiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsImRpc2FibGVkIiwiaW5pdEFwcCIsImdldFJlZGlyZWN0UmVzdWx0IiwidGhlbiIsInJlc3VsdCIsImNyZWRlbnRpYWwiLCJ0b2tlbiIsImFjY2Vzc1Rva2VuIiwiY29uc29sZSIsImxvZyIsInVzZXIiLCJlcnJvciIsImVycm9yQ29kZSIsImNvZGUiLCJtZXNzYWdlIiwiZW1haWwiLCJhbGVydCIsIm9uQXV0aFN0YXRlQ2hhbmdlZCIsImRpc3BsYXlOYW1lIiwiZW1haWxWZXJpZmllZCIsInBob3RvVVJMIiwiaXNBbm9ueW1vdXMiLCJ1aWQiLCJyZWZyZXNoVG9rZW4iLCJwcm92aWRlckRhdGEiLCJ0ZXh0Q29udGVudCIsInJlZiIsInVwZGF0ZSIsImFkZEV2ZW50TGlzdGVuZXIiLCIkIiwicmVhZHkiXSwibWFwcGluZ3MiOiJBQUFBLFlBQUEsSUFBSUEsU0FDQUMsT0FBUSwwQ0FDUkMsV0FBWSxzQ0FDWkMsWUFBYSw2Q0FDYkMsY0FBZSxrQ0FFbkJDLFVBQVNDLGNBQWNOLE9BRXZCLElBQUlPLFVBQVdGLFNBQVNFLFdBQ3BCQyxTQUFXLEdBQUlILFVBQVNJLEtBQUtDO0FDVGpDLFlBQUksU0FBU0MsZ0JBQ0wsR0FBS04sU0FBU0ksT0FBT0csWUFTakJQLFNBQVNJLE9BQU9JLGNBVGMsQ0FDOUIsR0FBSUwsR0FBVyxHQUFJSCxVQUFTSSxLQUFLQyxrQkFFakNGLEdBQVNNLFNBQVMsOENBQ2xCTixFQUFTTSxTQUFTLFdBQ2xCTixFQUFTTSxTQUFTLFNBQ2xCVCxTQUFTSSxPQUFPTSxtQkFBbUJQLEdBS3ZDUSxTQUFTQyxlQUFlLHNCQUFzQkMsVUFBVyxFQVk3RCxRQUFTQyxXQUNMZCxTQUFTSSxPQUFPVyxvQkFBb0JDLEtBQUssU0FBVUMsR0FDL0MsR0FBSUEsRUFBT0MsV0FBWSxDQUVuQixHQUFJQyxHQUFRRixFQUFPQyxXQUFXRSxXQUU5QkMsU0FBUUMsSUFBSUgsT0FFWkUsU0FBUUMsSUFBSSxhQUVMTCxHQUFPTSxPQVR0QnZCLFNBVVMsU0FBVXdCLEdBQ2YsR0FBSUMsR0FBWUQsRUFBTUUsSUFDSEYsR0FBTUcsUUFDYkgsRUFBTUksTUFDREosRUFBTU4sVUFDTCxtREFBZE8sRUFDQUksTUFBTSw2RUFFTlIsUUFBUUcsTUFBTUEsS0FHdEJ4QixTQUFTSSxPQUFPMEIsbUJBQW1CLFNBQVVQLEdBQ3JDQSxHQUNBUSxZQUFjUixFQUFLUSxZQUNuQkgsTUFBUUwsRUFBS0ssTUFDYkksY0FBZ0JULEVBQUtTLGNBQ3JCQyxTQUFXVixFQUFLVSxTQUNoQkMsWUFBY1gsRUFBS1csWUFDbkJDLElBQU1aLEVBQUtZLElBQ1hDLGFBQWViLEVBQUthLGFBQ3BCQyxhQUFlZCxFQUFLYyxhQUVwQjFCLFNBQVNDLGVBQWUsc0JBQXNCMEIsWUFBYyxXQUM1RHBDLFNBQVNxQyxJQUFULFNBQXNCSixLQUFPSyxRQUN6QlQsWUFBYUEsWUFDYkgsTUFBT0EsTUFDUEksY0FBZUEsY0FDZkMsU0FBVUEsU0FDVkMsWUFBYUEsWUFDYkMsSUFBS0EsSUFDTEMsYUFBY0EsYUFDZEMsYUFBY0EsZ0JBR2xCMUIsU0FBU0MsZUFBZSxzQkFBc0IwQixZQUFjLHNCQUVoRTNCLFNBQVNDLGVBQWUsc0JBQXNCQyxVQUFXLElBRTdERixTQUFTQyxlQUFlLHNCQUFzQjZCLGlCQUFpQixRQUFTbkMsY0FBYyxHQTFEMUYsR0FBSXlCLGFBQ0FILE1BQ0FJLGNBQ0FDLFNBQ0FDLFlBQ0FDLElBQ0FDLGFBQ0FDLFlBc0RKSyxHQUFFL0IsVUFBVWdDLE1BQU0sV0FDZDdCIiwiZmlsZSI6InNjcmlwdHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgY29uZmlnID0ge1xyXG4gICAgYXBpS2V5OiBcIkFJemFTeUNSZlJwMjBrRWtwd08xQnMzMHNEeUJrQzRRZi1yc3VOTVwiLFxyXG4gICAgYXV0aERvbWFpbjogXCJjb3Vyc2UtZmlsZS1hdWRpdG9yLmZpcmViYXNlYXBwLmNvbVwiLFxyXG4gICAgZGF0YWJhc2VVUkw6IFwiaHR0cHM6Ly9jb3Vyc2UtZmlsZS1hdWRpdG9yLmZpcmViYXNlaW8uY29tXCIsXHJcbiAgICBzdG9yYWdlQnVja2V0OiBcImNvdXJzZS1maWxlLWF1ZGl0b3IuYXBwc3BvdC5jb21cIixcclxufTtcclxuZmlyZWJhc2UuaW5pdGlhbGl6ZUFwcChjb25maWcpO1xyXG5cclxudmFyIGRhdGFiYXNlID0gZmlyZWJhc2UuZGF0YWJhc2UoKTtcclxudmFyIHByb3ZpZGVyID0gbmV3IGZpcmViYXNlLmF1dGguR29vZ2xlQXV0aFByb3ZpZGVyKCk7IiwiICAgIGZ1bmN0aW9uIHRvZ2dsZVNpZ25JbigpIHtcclxuICAgICAgICBpZiAoIWZpcmViYXNlLmF1dGgoKS5jdXJyZW50VXNlcikge1xyXG4gICAgICAgICAgICB2YXIgcHJvdmlkZXIgPSBuZXcgZmlyZWJhc2UuYXV0aC5Hb29nbGVBdXRoUHJvdmlkZXIoKTtcclxuXHJcbiAgICAgICAgICAgIHByb3ZpZGVyLmFkZFNjb3BlKCdodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9hdXRoL3BsdXMubG9naW4nKTtcclxuICAgICAgICAgICAgcHJvdmlkZXIuYWRkU2NvcGUoJ3Byb2ZpbGUnKTtcclxuICAgICAgICAgICAgcHJvdmlkZXIuYWRkU2NvcGUoJ2VtYWlsJyk7XHJcbiAgICAgICAgICAgIGZpcmViYXNlLmF1dGgoKS5zaWduSW5XaXRoUmVkaXJlY3QocHJvdmlkZXIpO1xyXG5cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBmaXJlYmFzZS5hdXRoKCkuc2lnbk91dCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncXVpY2tzdGFydC1zaWduLWluJykuZGlzYWJsZWQgPSB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciBkaXNwbGF5TmFtZSxcclxuICAgICAgICBlbWFpbCxcclxuICAgICAgICBlbWFpbFZlcmlmaWVkLFxyXG4gICAgICAgIHBob3RvVVJMLFxyXG4gICAgICAgIGlzQW5vbnltb3VzLFxyXG4gICAgICAgIHVpZCxcclxuICAgICAgICByZWZyZXNoVG9rZW4sXHJcbiAgICAgICAgcHJvdmlkZXJEYXRhO1xyXG5cclxuICAgIGZ1bmN0aW9uIGluaXRBcHAoKSB7XHJcbiAgICAgICAgZmlyZWJhc2UuYXV0aCgpLmdldFJlZGlyZWN0UmVzdWx0KCkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XHJcbiAgICAgICAgICAgIGlmIChyZXN1bHQuY3JlZGVudGlhbCkge1xyXG4gICAgICAgICAgICAgICAgLy8gVGhpcyBnaXZlcyB5b3UgYSBHb29nbGUgQWNjZXNzIFRva2VuLiBZb3UgY2FuIHVzZSBpdCB0byBhY2Nlc3MgdGhlIEdvb2dsZSBBUEkuXHJcbiAgICAgICAgICAgICAgICB2YXIgdG9rZW4gPSByZXN1bHQuY3JlZGVudGlhbC5hY2Nlc3NUb2tlbjtcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyh0b2tlbik7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygndG9rZW4gbnVsbCcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciB1c2VyID0gcmVzdWx0LnVzZXI7XHJcbiAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7XHJcbiAgICAgICAgICAgIHZhciBlcnJvckNvZGUgPSBlcnJvci5jb2RlO1xyXG4gICAgICAgICAgICB2YXIgZXJyb3JNZXNzYWdlID0gZXJyb3IubWVzc2FnZTtcclxuICAgICAgICAgICAgdmFyIGVtYWlsID0gZXJyb3IuZW1haWw7XHJcbiAgICAgICAgICAgIHZhciBjcmVkZW50aWFsID0gZXJyb3IuY3JlZGVudGlhbDtcclxuICAgICAgICAgICAgaWYgKGVycm9yQ29kZSA9PT0gJ2F1dGgvYWNjb3VudC1leGlzdHMtd2l0aC1kaWZmZXJlbnQtY3JlZGVudGlhbCcpIHtcclxuICAgICAgICAgICAgICAgIGFsZXJ0KCdZb3UgaGF2ZSBhbHJlYWR5IHNpZ25lZCB1cCB3aXRoIGEgZGlmZmVyZW50IGF1dGggcHJvdmlkZXIgZm9yIHRoYXQgZW1haWwuJyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGZpcmViYXNlLmF1dGgoKS5vbkF1dGhTdGF0ZUNoYW5nZWQoZnVuY3Rpb24gKHVzZXIpIHtcclxuICAgICAgICAgICAgaWYgKHVzZXIpIHtcclxuICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lID0gdXNlci5kaXNwbGF5TmFtZTtcclxuICAgICAgICAgICAgICAgIGVtYWlsID0gdXNlci5lbWFpbDtcclxuICAgICAgICAgICAgICAgIGVtYWlsVmVyaWZpZWQgPSB1c2VyLmVtYWlsVmVyaWZpZWQ7XHJcbiAgICAgICAgICAgICAgICBwaG90b1VSTCA9IHVzZXIucGhvdG9VUkw7XHJcbiAgICAgICAgICAgICAgICBpc0Fub255bW91cyA9IHVzZXIuaXNBbm9ueW1vdXM7XHJcbiAgICAgICAgICAgICAgICB1aWQgPSB1c2VyLnVpZDtcclxuICAgICAgICAgICAgICAgIHJlZnJlc2hUb2tlbiA9IHVzZXIucmVmcmVzaFRva2VuO1xyXG4gICAgICAgICAgICAgICAgcHJvdmlkZXJEYXRhID0gdXNlci5wcm92aWRlckRhdGE7XHJcblxyXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3F1aWNrc3RhcnQtc2lnbi1pbicpLnRleHRDb250ZW50ID0gJ1NpZ24gb3V0JztcclxuICAgICAgICAgICAgICAgIGRhdGFiYXNlLnJlZihgdXNlcnMvJHt1aWR9YCkudXBkYXRlKHtcclxuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZTogZGlzcGxheU5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgZW1haWw6IGVtYWlsLFxyXG4gICAgICAgICAgICAgICAgICAgIGVtYWlsVmVyaWZpZWQ6IGVtYWlsVmVyaWZpZWQsXHJcbiAgICAgICAgICAgICAgICAgICAgcGhvdG9VUkw6IHBob3RvVVJMLFxyXG4gICAgICAgICAgICAgICAgICAgIGlzQW5vbnltb3VzOiBpc0Fub255bW91cyxcclxuICAgICAgICAgICAgICAgICAgICB1aWQ6IHVpZCxcclxuICAgICAgICAgICAgICAgICAgICByZWZyZXNoVG9rZW46IHJlZnJlc2hUb2tlbixcclxuICAgICAgICAgICAgICAgICAgICBwcm92aWRlckRhdGE6IHByb3ZpZGVyRGF0YVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncXVpY2tzdGFydC1zaWduLWluJykudGV4dENvbnRlbnQgPSAnU2lnbiBpbiB3aXRoIEdvb2dsZSc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3F1aWNrc3RhcnQtc2lnbi1pbicpLmRpc2FibGVkID0gZmFsc2U7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3F1aWNrc3RhcnQtc2lnbi1pbicpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdG9nZ2xlU2lnbkluLCBmYWxzZSk7XHJcbiAgICB9XHJcblxuICAgICQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaW5pdEFwcCgpO1xuICAgIH0pO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
