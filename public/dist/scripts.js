"use strict";var config={apiKey:"AIzaSyCRfRp20kEkpwO1Bs30sDyBkC4Qf-rsuNM",authDomain:"course-file-auditor.firebaseapp.com",databaseURL:"https://course-file-auditor.firebaseio.com",storageBucket:"course-file-auditor.appspot.com"};firebase.initializeApp(config);var database=firebase.database(),provider=new firebase.auth.GoogleAuthProvider;
"use strict";function toggleSignIn(){if(firebase.auth().currentUser)firebase.auth().signOut();else{var e=new firebase.auth.GoogleAuthProvider;e.addScope("https://www.googleapis.com/auth/plus.login"),e.addScope("profile"),e.addScope("email"),firebase.auth().signInWithRedirect(e)}document.getElementById("quickstart-sign-in").disabled=!0}function initApp(){firebase.auth().getRedirectResult().then(function(e){if(e.credential){var i=e.credential.accessToken;console.log(i)}else console.log("token null");e.user})["catch"](function(e){var i=e.code;e.message,e.email,e.credential;"auth/account-exists-with-different-credential"===i?alert("You have already signed up with a different auth provider for that email."):console.error(e)}),firebase.auth().onAuthStateChanged(function(e){e?(displayName=e.displayName,email=e.email,emailVerified=e.emailVerified,photoURL=e.photoURL,isAnonymous=e.isAnonymous,uid=e.uid,refreshToken=e.refreshToken,providerData=e.providerData,document.getElementById("quickstart-sign-in").textContent="Sign out",database.ref("users/"+uid).update({displayName:displayName,email:email,emailVerified:emailVerified,photoURL:photoURL,isAnonymous:isAnonymous,uid:uid,refreshToken:refreshToken,providerData:providerData})):document.getElementById("quickstart-sign-in").textContent="Sign in with Google",document.getElementById("quickstart-sign-in").disabled=!1}),document.getElementById("quickstart-sign-in").addEventListener("click",toggleSignIn,!1)}var displayName,email,emailVerified,photoURL,isAnonymous,uid,refreshToken,providerData;window.onload=function(){initApp()};
"use strict";var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol?"symbol":typeof t};!function(t,e){t.wand=e()}("undefined"!=typeof window?window:void 0,function(){var t={apndr:function(t,e){if("object"!==("undefined"==typeof t?"undefined":_typeof(t))||"object"!==("undefined"==typeof e?"undefined":_typeof(e))||Array.isArray(e))if("object"!==("undefined"==typeof t?"undefined":_typeof(t)))console.error("First parameter passed is not an object element.");else if("object"!==("undefined"==typeof e?"undefined":_typeof(e)))"string"!=typeof e&&"number"!=typeof e||t.appendChild(this.txt(e));else if(Array.isArray(e))for(var r=e,n=0;n<r.length;n++)this.apndr(t,r[n]);else console.error("Parameters are not compatible in the lib.apndr function.  Hit the arrow on the left for call stack.");else t.appendChild(e)},querApndr:function(t,e,r){var n=document.querySelector(t);if(null!=n){if(Array.isArray(e))for(var o=e,i=0;i<o.length;i++)this.apndr(n,this.crtElm(o[i]));else r?this.apndr(n,this.crtElm(e,r)):this.apndr(n,e);return n}console.error("No tag exists in the DOM. Hit the arrow on the left for call stack.")},querAttr:function(t,e,r){var n=document.querySelector(t);null==n?console.error("No tag exists in the DOM. Hit the arrow on the left for call stack."):e&&n.setAttribute(e,r)},txt:function(t){return"string"==typeof t?document.createTextNode(t):"number"==typeof t?document.createTextNode(t.toString()):void console.error("Parameter passed to lib.txt is not a string nor a number.  Hit the arrow on the left for call stack.")},crtElm:function(t,e){var r,n=document.createElement(t);return e&&("string"==typeof e?(r=this.txt(e),this.apndr(n,r)):console.error("Must pass a string as the second param in lib.crtElm function.  Hit the arrow on the left for call stack.")),n}};return t});
"use strict";!function(a){function n(a,n){var r=wand.crtElm("section"),o=wand.crtElm("h2","Project Number "+a);o.className="courseTitle",wand.apndr(r,o),wand.querApndr("main article",r)}var r,o;a.startCourseLoad=function(){database.ref("Mark's Tool").once("child_added",function(a){o=a.val(),r=a.key,n(r,o)})},a.onload=a.startCourseLoad}(window);
"use strict";!function(){function e(){wand.querApndr("article","h1","Profile want to be seen?  Not yet!")}function t(){wand.querApndr("article","h1","Stats want to be seen?  Not yet!")}function n(e,t){database.ref(t).once("value",function(t){var n=t.val();"False"===n.Checked?e.checked=!1:"True"===n.Checked&&(e.checked=!0)}),e.onclick=function(n){e.checked===!1?(console.log(!1),database.ref(t).update({Checked:"False"})):e.checked===!0&&(console.log(e,t),database.ref(t).update({Checked:"True"}))}}function a(e,t){var a=wand.crtElm("div");a.id="todoContain";for(var r in e){var o=wand.crtElm("h3",r),i=wand.crtElm("div"),d=wand.crtElm("div");i.id="todo",d.id="details",d.setAttribute("display","false"),"false"===d.getAttribute("display")&&(d.style.display="none");for(var l in e[r]){var c=wand.crtElm("label",l+" | "),s=wand.crtElm("input"),u=wand.txt(" "+e[r][l]["Links Broken"]+" broken Links | "),f="Mark's Tool/"+t+"/Content Pages/"+r+"/"+l;s.type="checkbox",n(s,f),wand.apndr(c,u),wand.apndr(c,s),wand.apndr(d,c)}wand.apndr(i,o),wand.apndr(a,i),wand.apndr(a,d),wand.querApndr("article",a)}}function r(e){"There is nothing here!"===e?wand.querApndr("article","p","Quizzes are okay! "+e):console.log("Load a quiz table for the conversion!")}function o(e){var t=wand.crtElm("a","IL3 Link"),n=wand.crtElm("p");t.href=e,wand.apndr(n,t),wand.querApndr("article",n)}function i(e,t){o(e.Link),r(e.Quizzes),a(e["Content Pages"],t)}function d(e){var t,n=e.target.innerText.split("Project Number ")[1];database.ref("Mark's Tool/"+n).once("value",function(e){t=e.val(),i(t,n)})}function l(){s.innerHTML=""}function c(e,t){"false"===e?(t.style.display="block",t.setAttribute("display","true")):"true"===e&&(t.style.display="none",t.setAttribute("display","false"))}var s=wand.querApndr("article");document.onclick=function(n){var a=n.target.innerText.indexOf("Project")>-1,r="h2"===n.target.localName,o="button"===n.target.localName,i=n.target.innerText.indexOf("Home")>-1,s=n.target.innerText.indexOf("Profile")>-1,u=n.target.innerText.indexOf("Stats")>-1,f=n.target.localName,p=n.target.innerText.indexOf("Lesson")>-1;"checkbox"===n.target.type;if(a&&r)console.log("Project Clicked!"),l(),d(n);else if(i&&o)console.log("Home Clicked!"),l(),window.startCourseLoad();else if(s&&o)console.log("Profile clicked!"),l(),e();else if(u&&o)console.log("Stats clicked!"),l(),t();else{if(!f||!p)return;var k=n.target.parentElement.nextElementSibling,w=k.getAttribute("display");c(w,k)}}}();
"use strict";!function(){var t={home:"Home",profile:"My Profile",stats:"Stats"};for(var r in t)wand.querApndr("nav","button",t[r])}();
//# sourceMappingURL=data:application/json;base64,
