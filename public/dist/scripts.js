"use strict";var config={apiKey:"AIzaSyCRfRp20kEkpwO1Bs30sDyBkC4Qf-rsuNM",authDomain:"course-file-auditor.firebaseapp.com",databaseURL:"https://course-file-auditor.firebaseio.com",storageBucket:"course-file-auditor.appspot.com"};firebase.initializeApp(config);var database=firebase.database(),provider=new firebase.auth.GoogleAuthProvider;
"use strict";function toggleSignIn(){if(firebase.auth().currentUser)firebase.auth().signOut();else{var e=new firebase.auth.GoogleAuthProvider;e.addScope("https://www.googleapis.com/auth/plus.login"),e.addScope("profile"),e.addScope("email"),firebase.auth().signInWithRedirect(e)}document.getElementById("quickstart-sign-in").disabled=!0}function initApp(){firebase.auth().getRedirectResult().then(function(e){if(e.credential){var i=e.credential.accessToken;console.log(i)}else console.log("token null");e.user})["catch"](function(e){var i=e.code;e.message,e.email,e.credential;"auth/account-exists-with-different-credential"===i?alert("You have already signed up with a different auth provider for that email."):console.error(e)}),firebase.auth().onAuthStateChanged(function(e){e?(displayName=e.displayName,email=e.email,emailVerified=e.emailVerified,photoURL=e.photoURL,isAnonymous=e.isAnonymous,uid=e.uid,refreshToken=e.refreshToken,providerData=e.providerData,document.getElementById("quickstart-sign-in").textContent="Sign out",database.ref("users/"+uid).update({displayName:displayName,email:email,emailVerified:emailVerified,photoURL:photoURL,isAnonymous:isAnonymous,uid:uid,refreshToken:refreshToken,providerData:providerData})):document.getElementById("quickstart-sign-in").textContent="Sign in with Google",document.getElementById("quickstart-sign-in").disabled=!1}),document.getElementById("quickstart-sign-in").addEventListener("click",toggleSignIn,!1)}var displayName,email,emailVerified,photoURL,isAnonymous,uid,refreshToken,providerData;window.onload=function(){initApp()};
"use strict";var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol?"symbol":typeof t};!function(t,e){t.wand=e()}("undefined"!=typeof window?window:void 0,function(){var t={apndr:function(t,e){if("object"!==("undefined"==typeof t?"undefined":_typeof(t))||"object"!==("undefined"==typeof e?"undefined":_typeof(e))||Array.isArray(e))if("object"!==("undefined"==typeof t?"undefined":_typeof(t)))console.error("First parameter passed is not an object element.");else if("object"!==("undefined"==typeof e?"undefined":_typeof(e)))"string"!=typeof e&&"number"!=typeof e||t.appendChild(this.txt(e));else if(Array.isArray(e))for(var r=e,n=0;n<r.length;n++)this.apndr(t,r[n]);else console.error("Parameters are not compatible in the lib.apndr function.  Hit the arrow on the left for call stack.");else t.appendChild(e)},querApndr:function(t,e,r){var n=document.querySelector(t);if(null!=n){if(Array.isArray(e))for(var o=e,i=0;i<o.length;i++)this.apndr(n,this.crtElm(o[i]));else r?this.apndr(n,this.crtElm(e,r)):this.apndr(n,e);return n}console.error("No tag exists in the DOM. Hit the arrow on the left for call stack.")},querAttr:function(t,e,r){var n=document.querySelector(t);null==n?console.error("No tag exists in the DOM. Hit the arrow on the left for call stack."):e&&n.setAttribute(e,r)},txt:function(t){return"string"==typeof t?document.createTextNode(t):"number"==typeof t?document.createTextNode(t.toString()):void console.error("Parameter passed to lib.txt is not a string nor a number.  Hit the arrow on the left for call stack.")},crtElm:function(t,e){var r,n=document.createElement(t);return e&&("string"==typeof e?(r=this.txt(e),this.apndr(n,r)):console.error("Must pass a string as the second param in lib.crtElm function.  Hit the arrow on the left for call stack.")),n}};return t});
"use strict";!function(){function e(){wand.querApndr("article","h1","Profile want to be seen?  Not yet!")}function n(){wand.querApndr("article","h1","Stats want to be seen?  Not yet!")}function t(e){for(var n in e)console.log(e[n]),wand.querApndr("article","p",n)}function o(e){"There is nothing here!"===e&&wand.querApndr("article","h1",e)}function r(e){wand.querApndr("article","h1",e)}function i(e){console.log(e),r(e.Link),o(e.Quizzes),t(e["Content Pages"])}function a(){l.innerHTML=""}function c(e){var n,t=e.target.innerText.split("Project Number ")[1];database.ref("Mark's Tool/"+t).once("value",function(e){n=e.val(),i(n)})}var l=wand.querApndr("article");document.onclick=function(t){var o=t.target.innerText.indexOf("Project")>-1,r="h2"===t.target.localName,i="button"===t.target.localName,l=t.target.innerText.indexOf("Home")>-1,u=t.target.innerText.indexOf("Profile")>-1,d=t.target.innerText.indexOf("Stats")>-1;if(o&&r)console.log("Project Clicked!"),a(),c(t);else if(l&&i)console.log("Home Clicked!"),a(),window.startCourseLoad();else if(u&&i)console.log("Profile clicked!"),a(),e();else{if(!d||!i)return;console.log("Stats clicked!"),a(),n()}}}();
"use strict";!function(a){function n(a,n){var r=wand.crtElm("section"),o=wand.crtElm("h2","Project Number "+a);o.className="courseTitle",wand.apndr(r,o),wand.querApndr("main article",r)}var r,o;a.startCourseLoad=function(){database.ref("Mark's Tool").once("child_added",function(a){o=a.val(),r=a.key,n(r,o)})},a.onload=a.startCourseLoad}(window);
"use strict";!function(){var t={home:"Home",profile:"My Profile",stats:"Stats"};for(var r in t)wand.querApndr("nav","button",t[r])}();
//# sourceMappingURL=data:application/json;base64,
