"use strict";var config={apiKey:"AIzaSyCRfRp20kEkpwO1Bs30sDyBkC4Qf-rsuNM",authDomain:"course-file-auditor.firebaseapp.com",databaseURL:"https://course-file-auditor.firebaseio.com",storageBucket:"course-file-auditor.appspot.com"};firebase.initializeApp(config);var database=firebase.database(),provider=new firebase.auth.GoogleAuthProvider;
"use strict";function toggleSignIn(){if(firebase.auth().currentUser)firebase.auth().signOut();else{var e=new firebase.auth.GoogleAuthProvider;e.addScope("https://www.googleapis.com/auth/plus.login"),e.addScope("profile"),e.addScope("email"),firebase.auth().signInWithRedirect(e)}document.getElementById("quickstart-sign-in").disabled=!0}function initApp(){firebase.auth().getRedirectResult().then(function(e){if(e.credential){var i=e.credential.accessToken;console.log(i)}else console.log("token null");e.user})["catch"](function(e){var i=e.code;e.message,e.email,e.credential;"auth/account-exists-with-different-credential"===i?alert("You have already signed up with a different auth provider for that email."):console.error(e)}),firebase.auth().onAuthStateChanged(function(e){e?(displayName=e.displayName,email=e.email,emailVerified=e.emailVerified,photoURL=e.photoURL,isAnonymous=e.isAnonymous,uid=e.uid,refreshToken=e.refreshToken,providerData=e.providerData,document.getElementById("quickstart-sign-in").textContent="Sign out",database.ref("users/"+uid).update({displayName:displayName,email:email,emailVerified:emailVerified,photoURL:photoURL,isAnonymous:isAnonymous,uid:uid,refreshToken:refreshToken,providerData:providerData})):document.getElementById("quickstart-sign-in").textContent="Sign in with Google",document.getElementById("quickstart-sign-in").disabled=!1}),document.getElementById("quickstart-sign-in").addEventListener("click",toggleSignIn,!1)}var displayName,email,emailVerified,photoURL,isAnonymous,uid,refreshToken,providerData;
"use strict";function generateCoursePreview(e,r){var o=$("<section></section"),a=$("<h2>Project Number "+e+"</h2>").addClass("courseTitle");$(o).append(a),$("main article").append(o)}function startCourseLoad(){database.ref("Mark's Tool").once("value",function(e){e.forEach(function(e){course_details=e.val(),course_id=e.key,generateCoursePreview(course_id,course_details)})})}var course_id,course_details;$(document).ready(function(){startCourseLoad(),initApp()});
"use strict";
"use strict";$(document).ready(function(){var t={home:"Home",profile:"My Profile",stats:"Stats"};$.each(t,function(t,o){$("nav").append("<button>"+o+"</button>"),console.log(t,o)})});
//# sourceMappingURL=data:application/json;base64,
