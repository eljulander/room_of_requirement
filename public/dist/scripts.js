"use strict";var config={apiKey:"AIzaSyCBNNxQ8ewVWXxMUFYXmGAGTv0IQ3ejje0",authDomain:"room-of-requirement.firebaseapp.com",databaseURL:"https://room-of-requirement.firebaseio.com",storageBucket:"firebase-room-of-requirement.appspot.com"};firebase.initializeApp(config);var database=firebase.database(),provider=new firebase.auth.GoogleAuthProvider;
"use strict";function toggleSignIn(){if(firebase.auth().currentUser)firebase.auth().signOut();else{var t=new firebase.auth.GoogleAuthProvider;t.addScope("https://www.googleapis.com/auth/plus.login"),firebase.auth().signInWithRedirect(t)}document.getElementById("quickstart-sign-in").disabled=!0}function initApp(){firebase.auth().getRedirectResult().then(function(t){if(t.credential){var e=t.credential.accessToken;document.getElementById("quickstart-oauthtoken").textContent=e}else document.getElementById("quickstart-oauthtoken").textContent="null";t.user})["catch"](function(t){var e=t.code;t.message,t.email,t.credential;"auth/account-exists-with-different-credential"===e?alert("You have already signed up with a different auth provider for that email."):console.error(t)}),firebase.auth().onAuthStateChanged(function(t){if(t){var e=t.displayName,n=t.email,i=t.emailVerified,a=t.photoURL,o=t.isAnonymous,u=t.uid,s=t.refreshToken,d=t.providerData;document.getElementById("quickstart-sign-in-status").textContent="Signed in",document.getElementById("quickstart-sign-in").textContent="Sign out",document.getElementById("quickstart-account-details").textContent=JSON.stringify({displayName:e,email:n,emailVerified:i,photoURL:a,isAnonymous:o,uid:u,refreshToken:s,providerData:d},null,"  ")}else document.getElementById("quickstart-sign-in-status").textContent="Signed out",document.getElementById("quickstart-sign-in").textContent="Sign in with Google",document.getElementById("quickstart-account-details").textContent="null",document.getElementById("quickstart-oauthtoken").textContent="null";document.getElementById("quickstart-sign-in").disabled=!1}),document.getElementById("quickstart-sign-in").addEventListener("click",toggleSignIn,!1)}window.onload=function(){initApp()};
"use strict";function toggleSignIn(){if(firebase.auth().currentUser)firebase.auth().signOut();else{var t=new firebase.auth.GoogleAuthProvider;t.addScope("https://www.googleapis.com/auth/plus.login"),firebase.auth().signInWithRedirect(t)}document.getElementById("quickstart-sign-in").disabled=!0}function initApp(){firebase.auth().getRedirectResult().then(function(t){if(t.credential){var e=t.credential.accessToken;document.getElementById("quickstart-oauthtoken").textContent=e}else document.getElementById("quickstart-oauthtoken").textContent="null";t.user})["catch"](function(t){var e=t.code;t.message,t.email,t.credential,"auth/account-exists-with-different-credential"===e?alert("You have already signed up with a different auth provider for that email."):console.error(t)}),firebase.auth().onAuthStateChanged(function(t){if(t){var e=t.displayName,n=t.email,i=t.emailVerified,a=t.photoURL,o=t.isAnonymous,u=t.uid,s=t.refreshToken,d=t.providerData;document.getElementById("quickstart-sign-in-status").textContent="Signed in",document.getElementById("quickstart-sign-in").textContent="Sign out",document.getElementById("quickstart-account-details").textContent=JSON.stringify({displayName:e,email:n,emailVerified:i,photoURL:a,isAnonymous:o,uid:u,refreshToken:s,providerData:d},null,"  ")}else document.getElementById("quickstart-sign-in-status").textContent="Signed out",document.getElementById("quickstart-sign-in").textContent="Sign in with Google",document.getElementById("quickstart-account-details").textContent="null",document.getElementById("quickstart-oauthtoken").textContent="null";document.getElementById("quickstart-sign-in").disabled=!1}),document.getElementById("quickstart-sign-in").addEventListener("click",toggleSignIn,!1)}window.onload=function(){initApp()};
"use strict";database.ref("courses").on("value",function(e){console.log(e.val())});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbmZpZy5qcyIsImxvZ2luLmpzIiwibG9naW4ubWluLmpzIiwibWFpbi5qcyJdLCJuYW1lcyI6WyJjb25maWciLCJhcGlLZXkiLCJhdXRoRG9tYWluIiwiZGF0YWJhc2VVUkwiLCJzdG9yYWdlQnVja2V0IiwiZmlyZWJhc2UiLCJpbml0aWFsaXplQXBwIiwiZGF0YWJhc2UiLCJwcm92aWRlciIsImF1dGgiLCJHb29nbGVBdXRoUHJvdmlkZXIiLCJ0b2dnbGVTaWduSW4iLCJjdXJyZW50VXNlciIsInNpZ25PdXQiLCJhZGRTY29wZSIsInNpZ25JbldpdGhSZWRpcmVjdCIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJkaXNhYmxlZCIsImluaXRBcHAiLCJnZXRSZWRpcmVjdFJlc3VsdCIsInRoZW4iLCJyZXN1bHQiLCJjcmVkZW50aWFsIiwidG9rZW4iLCJhY2Nlc3NUb2tlbiIsInRleHRDb250ZW50IiwidXNlciIsImVycm9yIiwiZXJyb3JDb2RlIiwiY29kZSIsIm1lc3NhZ2UiLCJlbWFpbCIsImFsZXJ0IiwiY29uc29sZSIsIm9uQXV0aFN0YXRlQ2hhbmdlZCIsImRpc3BsYXlOYW1lIiwiZW1haWxWZXJpZmllZCIsInBob3RvVVJMIiwiaXNBbm9ueW1vdXMiLCJ1aWQiLCJyZWZyZXNoVG9rZW4iLCJwcm92aWRlckRhdGEiLCJKU09OIiwic3RyaW5naWZ5IiwiYWRkRXZlbnRMaXN0ZW5lciIsIndpbmRvdyIsIm9ubG9hZCIsImUiLCJ0IiwibiIsImkiLCJhIiwibyIsInIiLCJzIiwidSIsInJlZiIsIm9uIiwic25hcCIsImxvZyIsInZhbCJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBQSxJQUFJQSxTQUNBQyxPQUFRLDBDQUNSQyxXQUFZLHNDQUNaQyxZQUFhLDZDQUNiQyxjQUFlLDJDQUVuQkMsVUFBU0MsY0FBY04sT0FFdkIsSUFBSU8sVUFBV0YsU0FBU0UsV0FDcEJDLFNBQVcsR0FBSUgsVUFBU0ksS0FBS0M7QUNUakMsWUFBSSxTQUFTQyxnQkFD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QUFTQyxlQUFlLDZCQUE2QlMsWUFBWSxZQUFZVixTQUFTQyxlQUFlLHNCQUFzQlMsWUFBWSxXQUFXVixTQUFTQyxlQUFlLDhCQUE4QlMsWUFBWWlCLEtBQUtDLFdBQVdSLFlBQVlhLEVBQUVqQixNQUFNa0IsRUFBRWIsY0FBY2MsRUFBRWIsU0FBU2MsRUFBRWIsWUFBWWMsRUFBRWIsSUFBSWMsRUFBRWIsYUFBYWMsRUFBRWIsYUFBYWMsR0FBRyxLQUFLLFVBQVd4QyxVQUFTQyxlQUFlLDZCQUE2QlMsWUFBWSxhQUFhVixTQUFTQyxlQUFlLHNCQUFzQlMsWUFBWSxzQkFBc0JWLFNBQVNDLGVBQWUsOEJBQThCUyxZQUFZLE9BQU9WLFNBQVNDLGVBQWUseUJBQXlCUyxZQUFZLE1BQU9WLFVBQVNDLGVBQWUsc0JBQXNCQyxVQUFTLElBQUtGLFNBQVNDLGVBQWUsc0JBQXNCNEIsaUJBQWlCLFFBQVFsQyxjQUFhLEdBQUltQyxPQUFPQyxPQUFPLFdBQVc1QjtBQ0ExdEQsWUFBQVosVUFBU2tELElBQUksV0FBV0MsR0FBRyxRQUFTLFNBQVNDLEdBQ3pDekIsUUFBUTBCLElBQUlELEVBQUtFIiwiZmlsZSI6InNjcmlwdHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgY29uZmlnID0ge1xyXG4gICAgYXBpS2V5OiBcIkFJemFTeUNCTk54UThld1ZXWHhNVUZZWG1HQUdUdjBJUTNlamplMFwiLFxyXG4gICAgYXV0aERvbWFpbjogXCJyb29tLW9mLXJlcXVpcmVtZW50LmZpcmViYXNlYXBwLmNvbVwiLFxyXG4gICAgZGF0YWJhc2VVUkw6IFwiaHR0cHM6Ly9yb29tLW9mLXJlcXVpcmVtZW50LmZpcmViYXNlaW8uY29tXCIsXHJcbiAgICBzdG9yYWdlQnVja2V0OiBcImZpcmViYXNlLXJvb20tb2YtcmVxdWlyZW1lbnQuYXBwc3BvdC5jb21cIixcclxuICB9O1xyXG5maXJlYmFzZS5pbml0aWFsaXplQXBwKGNvbmZpZyk7XHJcblxyXG52YXIgZGF0YWJhc2UgPSBmaXJlYmFzZS5kYXRhYmFzZSgpO1xyXG52YXIgcHJvdmlkZXIgPSBuZXcgZmlyZWJhc2UuYXV0aC5Hb29nbGVBdXRoUHJvdmlkZXIoKTtcclxuIiwiICAgIGZ1bmN0aW9uIHRvZ2dsZVNpZ25JbigpIHtcbiAgICAgIGlmICghZmlyZWJhc2UuYXV0aCgpLmN1cnJlbnRVc2VyKSB7XG4gICAgICAgIHZhciBwcm92aWRlciA9IG5ldyBmaXJlYmFzZS5hdXRoLkdvb2dsZUF1dGhQcm92aWRlcigpO1xuICAgICAgICAgIFxuICAgICAgICBwcm92aWRlci5hZGRTY29wZSgnaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vYXV0aC9wbHVzLmxvZ2luJyk7XG4gICAgICAgIGZpcmViYXNlLmF1dGgoKS5zaWduSW5XaXRoUmVkaXJlY3QocHJvdmlkZXIpO1xuICAgICAgICBcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZpcmViYXNlLmF1dGgoKS5zaWduT3V0KCk7XG4gICAgICB9XG4gICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncXVpY2tzdGFydC1zaWduLWluJykuZGlzYWJsZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluaXRBcHAoKSB7XG4gICAgICAgIFxuICAgICAgZmlyZWJhc2UuYXV0aCgpLmdldFJlZGlyZWN0UmVzdWx0KCkudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgaWYgKHJlc3VsdC5jcmVkZW50aWFsKSB7XG4gICAgICAgICAgLy8gVGhpcyBnaXZlcyB5b3UgYSBHb29nbGUgQWNjZXNzIFRva2VuLiBZb3UgY2FuIHVzZSBpdCB0byBhY2Nlc3MgdGhlIEdvb2dsZSBBUEkuXG4gICAgICAgICAgdmFyIHRva2VuID0gcmVzdWx0LmNyZWRlbnRpYWwuYWNjZXNzVG9rZW47XG4gICAgICAgICAgICBcbiAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncXVpY2tzdGFydC1vYXV0aHRva2VuJykudGV4dENvbnRlbnQgPSB0b2tlbjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncXVpY2tzdGFydC1vYXV0aHRva2VuJykudGV4dENvbnRlbnQgPSAnbnVsbCc7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHVzZXIgPSByZXN1bHQudXNlcjtcbiAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgIHZhciBlcnJvckNvZGUgPSBlcnJvci5jb2RlO1xuICAgICAgICB2YXIgZXJyb3JNZXNzYWdlID0gZXJyb3IubWVzc2FnZTtcbiAgICAgICAgdmFyIGVtYWlsID0gZXJyb3IuZW1haWw7XG4gICAgICAgIHZhciBjcmVkZW50aWFsID0gZXJyb3IuY3JlZGVudGlhbDtcbiAgICAgICAgaWYgKGVycm9yQ29kZSA9PT0gJ2F1dGgvYWNjb3VudC1leGlzdHMtd2l0aC1kaWZmZXJlbnQtY3JlZGVudGlhbCcpIHtcbiAgICAgICAgICBhbGVydCgnWW91IGhhdmUgYWxyZWFkeSBzaWduZWQgdXAgd2l0aCBhIGRpZmZlcmVudCBhdXRoIHByb3ZpZGVyIGZvciB0aGF0IGVtYWlsLicpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGZpcmViYXNlLmF1dGgoKS5vbkF1dGhTdGF0ZUNoYW5nZWQoZnVuY3Rpb24odXNlcikge1xuICAgICAgICBpZiAodXNlcikge1xuICAgICAgICAgIHZhciBkaXNwbGF5TmFtZSA9IHVzZXIuZGlzcGxheU5hbWUsXG4gICAgICAgICAgICAgIGVtYWlsID0gdXNlci5lbWFpbCxcbiAgICAgICAgICAgICAgZW1haWxWZXJpZmllZCA9IHVzZXIuZW1haWxWZXJpZmllZCxcbiAgICAgICAgICAgICAgcGhvdG9VUkwgPSB1c2VyLnBob3RvVVJMLFxuICAgICAgICAgICAgICBpc0Fub255bW91cyA9IHVzZXIuaXNBbm9ueW1vdXMsXG4gICAgICAgICAgICAgIHVpZCA9IHVzZXIudWlkLFxuICAgICAgICAgICAgICByZWZyZXNoVG9rZW4gPSB1c2VyLnJlZnJlc2hUb2tlbixcbiAgICAgICAgICAgICAgcHJvdmlkZXJEYXRhID0gdXNlci5wcm92aWRlckRhdGE7XG4gICAgICAgICAgICBcbiAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncXVpY2tzdGFydC1zaWduLWluLXN0YXR1cycpLnRleHRDb250ZW50ID0gJ1NpZ25lZCBpbic7XG4gICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3F1aWNrc3RhcnQtc2lnbi1pbicpLnRleHRDb250ZW50ID0gJ1NpZ24gb3V0JztcbiAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncXVpY2tzdGFydC1hY2NvdW50LWRldGFpbHMnKS50ZXh0Q29udGVudCA9IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgIGRpc3BsYXlOYW1lOiBkaXNwbGF5TmFtZSxcbiAgICAgICAgICAgIGVtYWlsOiBlbWFpbCxcbiAgICAgICAgICAgIGVtYWlsVmVyaWZpZWQ6IGVtYWlsVmVyaWZpZWQsXG4gICAgICAgICAgICBwaG90b1VSTDogcGhvdG9VUkwsXG4gICAgICAgICAgICBpc0Fub255bW91czogaXNBbm9ueW1vdXMsXG4gICAgICAgICAgICB1aWQ6IHVpZCxcbiAgICAgICAgICAgIHJlZnJlc2hUb2tlbjogcmVmcmVzaFRva2VuLFxuICAgICAgICAgICAgcHJvdmlkZXJEYXRhOiBwcm92aWRlckRhdGFcbiAgICAgICAgICB9LCBudWxsLCAnICAnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncXVpY2tzdGFydC1zaWduLWluLXN0YXR1cycpLnRleHRDb250ZW50ID0gJ1NpZ25lZCBvdXQnO1xuICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdxdWlja3N0YXJ0LXNpZ24taW4nKS50ZXh0Q29udGVudCA9ICdTaWduIGluIHdpdGggR29vZ2xlJztcbiAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncXVpY2tzdGFydC1hY2NvdW50LWRldGFpbHMnKS50ZXh0Q29udGVudCA9ICdudWxsJztcbiAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncXVpY2tzdGFydC1vYXV0aHRva2VuJykudGV4dENvbnRlbnQgPSAnbnVsbCc7XG4gICAgICAgIH1cbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3F1aWNrc3RhcnQtc2lnbi1pbicpLmRpc2FibGVkID0gZmFsc2U7XG4gICAgICB9KTtcbiAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdxdWlja3N0YXJ0LXNpZ24taW4nKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRvZ2dsZVNpZ25JbiwgZmFsc2UpO1xuICAgIH1cbiAgICB3aW5kb3cub25sb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgICBpbml0QXBwKCk7XG4gICAgfTtcbiIsImZ1bmN0aW9uIHRvZ2dsZVNpZ25Jbigpe2lmKGZpcmViYXNlLmF1dGgoKS5jdXJyZW50VXNlcilmaXJlYmFzZS5hdXRoKCkuc2lnbk91dCgpO2Vsc2V7dmFyIGU9bmV3IGZpcmViYXNlLmF1dGguR29vZ2xlQXV0aFByb3ZpZGVyO2UuYWRkU2NvcGUoXCJodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9hdXRoL3BsdXMubG9naW5cIiksZmlyZWJhc2UuYXV0aCgpLnNpZ25JbldpdGhSZWRpcmVjdChlKX1kb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInF1aWNrc3RhcnQtc2lnbi1pblwiKS5kaXNhYmxlZD0hMH1mdW5jdGlvbiBpbml0QXBwKCl7ZmlyZWJhc2UuYXV0aCgpLmdldFJlZGlyZWN0UmVzdWx0KCkudGhlbihmdW5jdGlvbihlKXtpZihlLmNyZWRlbnRpYWwpe3ZhciB0PWUuY3JlZGVudGlhbC5hY2Nlc3NUb2tlbjtkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInF1aWNrc3RhcnQtb2F1dGh0b2tlblwiKS50ZXh0Q29udGVudD10fWVsc2UgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJxdWlja3N0YXJ0LW9hdXRodG9rZW5cIikudGV4dENvbnRlbnQ9XCJudWxsXCI7ZS51c2VyfSlbXCJjYXRjaFwiXShmdW5jdGlvbihlKXt2YXIgdD1lLmNvZGU7ZS5tZXNzYWdlLGUuZW1haWwsZS5jcmVkZW50aWFsO1wiYXV0aC9hY2NvdW50LWV4aXN0cy13aXRoLWRpZmZlcmVudC1jcmVkZW50aWFsXCI9PT10P2FsZXJ0KFwiWW91IGhhdmUgYWxyZWFkeSBzaWduZWQgdXAgd2l0aCBhIGRpZmZlcmVudCBhdXRoIHByb3ZpZGVyIGZvciB0aGF0IGVtYWlsLlwiKTpjb25zb2xlLmVycm9yKGUpfSksZmlyZWJhc2UuYXV0aCgpLm9uQXV0aFN0YXRlQ2hhbmdlZChmdW5jdGlvbihlKXtpZihlKXt2YXIgdD1lLmRpc3BsYXlOYW1lLG49ZS5lbWFpbCxpPWUuZW1haWxWZXJpZmllZCxhPWUucGhvdG9VUkwsbz1lLmlzQW5vbnltb3VzLHI9ZS51aWQscz1lLnJlZnJlc2hUb2tlbix1PWUucHJvdmlkZXJEYXRhO2RvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicXVpY2tzdGFydC1zaWduLWluLXN0YXR1c1wiKS50ZXh0Q29udGVudD1cIlNpZ25lZCBpblwiLGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicXVpY2tzdGFydC1zaWduLWluXCIpLnRleHRDb250ZW50PVwiU2lnbiBvdXRcIixkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInF1aWNrc3RhcnQtYWNjb3VudC1kZXRhaWxzXCIpLnRleHRDb250ZW50PUpTT04uc3RyaW5naWZ5KHtkaXNwbGF5TmFtZTp0LGVtYWlsOm4sZW1haWxWZXJpZmllZDppLHBob3RvVVJMOmEsaXNBbm9ueW1vdXM6byx1aWQ6cixyZWZyZXNoVG9rZW46cyxwcm92aWRlckRhdGE6dX0sbnVsbCxcIiAgXCIpfWVsc2UgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJxdWlja3N0YXJ0LXNpZ24taW4tc3RhdHVzXCIpLnRleHRDb250ZW50PVwiU2lnbmVkIG91dFwiLGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicXVpY2tzdGFydC1zaWduLWluXCIpLnRleHRDb250ZW50PVwiU2lnbiBpbiB3aXRoIEdvb2dsZVwiLGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicXVpY2tzdGFydC1hY2NvdW50LWRldGFpbHNcIikudGV4dENvbnRlbnQ9XCJudWxsXCIsZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJxdWlja3N0YXJ0LW9hdXRodG9rZW5cIikudGV4dENvbnRlbnQ9XCJudWxsXCI7ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJxdWlja3N0YXJ0LXNpZ24taW5cIikuZGlzYWJsZWQ9ITF9KSxkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInF1aWNrc3RhcnQtc2lnbi1pblwiKS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIix0b2dnbGVTaWduSW4sITEpfXdpbmRvdy5vbmxvYWQ9ZnVuY3Rpb24oKXtpbml0QXBwKCl9OyIsImRhdGFiYXNlLnJlZihcImNvdXJzZXNcIikub24oXCJ2YWx1ZVwiLCBmdW5jdGlvbihzbmFwKSB7XG4gICAgY29uc29sZS5sb2coc25hcC52YWwoKSk7XG59KVxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
