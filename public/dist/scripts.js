"use strict";var config={apiKey:"AIzaSyCRfRp20kEkpwO1Bs30sDyBkC4Qf-rsuNM",authDomain:"course-file-auditor.firebaseapp.com",databaseURL:"https://course-file-auditor.firebaseio.com",storageBucket:"course-file-auditor.appspot.com"};firebase.initializeApp(config);var database=firebase.database(),provider=new firebase.auth.GoogleAuthProvider;
"use strict";function toggleSignIn(){if(firebase.auth().currentUser)firebase.auth().signOut();else{var e=new firebase.auth.GoogleAuthProvider;e.addScope("https://www.googleapis.com/auth/plus.login"),e.addScope("profile"),e.addScope("email"),firebase.auth().signInWithRedirect(e)}document.getElementById("quickstart-sign-in").disabled=!0}function initApp(){firebase.auth().getRedirectResult().then(function(e){if(e.credential){var i=e.credential.accessToken;console.log(i)}else console.log("token null");e.user})["catch"](function(e){var i=e.code;e.message,e.email,e.credential;"auth/account-exists-with-different-credential"===i?alert("You have already signed up with a different auth provider for that email."):console.error(e)}),firebase.auth().onAuthStateChanged(function(e){e?(displayName=e.displayName,email=e.email,emailVerified=e.emailVerified,photoURL=e.photoURL,isAnonymous=e.isAnonymous,uid=e.uid,refreshToken=e.refreshToken,providerData=e.providerData,document.getElementById("quickstart-sign-in").textContent="Sign out",database.ref("users/"+uid).update({displayName:displayName,email:email,emailVerified:emailVerified,photoURL:photoURL,isAnonymous:isAnonymous,uid:uid,refreshToken:refreshToken,providerData:providerData})):document.getElementById("quickstart-sign-in").textContent="Sign in with Google",document.getElementById("quickstart-sign-in").disabled=!1}),document.getElementById("quickstart-sign-in").addEventListener("click",toggleSignIn,!1)}var displayName,email,emailVerified,photoURL,isAnonymous,uid,refreshToken,providerData;
"use strict";function generateCoursePreview(e,r){var o=$("<section></section"),a=$("<h2>Project Number "+e+"</h2>").addClass("courseTitle");$(o).append(a),$("main article").append(o)}function startCourseLoad(){database.ref("Mark's Tool").once("value",function(e){e.forEach(function(e){course_details=e.val(),course_id=e.key,generateCoursePreview(course_id,course_details)})})}var course_id,course_details;$(document).ready(function(){startCourseLoad(),initApp()});
"use strict";!function(){function e(){var e=$("<h1>Profile want to be seen?  Not yet!</h1>");$(c).append(e)}function t(){var e=$("<h1>Stats want to be seen?  Not yet!</h1>");$(c).append(e)}function n(e,t){$("<div></div>").attr("id","todoContain");for(var n in e)var i=$("<h3>"+n+"</h3>"),a=$("<div></div>").attr("id","todo"),o=$("<div></div>").attr("id","details").attr("display","false")}function i(e){"There is nothing here!"===e?$(c).append("<p>Quizzes are okay! "+e+"</p>"):console.log("Load a quiz table for the conversion!")}function a(e){var t=$("<a>IL3 Link</a>").attr("href",e),n=$("<p></p>");$(n).append(t),$(c).append(n)}function o(e,t){a(e.Link),i(e.Quizzes),n(e["Content Pages"],t)}function r(e){var t,n=e.target.innerText.split("Project Number ")[1];database.ref("Mark's Tool/"+n).once("value",function(e){t=e.val(),o(t,n)})}function l(){c.innerHTML=""}function s(e,t){"false"===e?(t.style.display="block",t.setAttribute("display","true")):"true"===e&&(t.style.display="none",t.setAttribute("display","false"))}var c=$("article");document.onclick=function(n){var i=n.target.innerText.indexOf("Project")>-1,a="h2"===n.target.localName,o="button"===n.target.localName,c=n.target.innerText.indexOf("Home")>-1,d=n.target.innerText.indexOf("Profile")>-1,f=n.target.innerText.indexOf("Stats")>-1,u=n.target.localName,p=n.target.innerText.indexOf("Lesson")>-1||n.target.innerText.indexOf("Module")>-1||n.target.innerText.indexOf("Welcome")>-1;"checkbox"===n.target.type;if(i&&a)console.log("Project Clicked!"),l(),r(n);else if(c&&o)console.log("Home Clicked!"),l(),window.startCourseLoad();else if(d&&o)console.log("Profile clicked!"),l(),e();else if(f&&o)console.log("Stats clicked!"),l(),t();else{if(!u||!p)return;var g=n.target.parentElement.nextElementSibling,v=g.getAttribute("display");s(v,g)}}}();
"use strict";$(document).ready(function(){var t={home:"Home",profile:"My Profile",stats:"Stats"};$.each(t,function(t,o){$("nav").append("<button>"+o+"</button>"),console.log(t,o)})});
//# sourceMappingURL=data:application/json;base64,
