"use strict";var config={apiKey:"AIzaSyCRfRp20kEkpwO1Bs30sDyBkC4Qf-rsuNM",authDomain:"course-file-auditor.firebaseapp.com",databaseURL:"https://course-file-auditor.firebaseio.com",storageBucket:"course-file-auditor.appspot.com"};firebase.initializeApp(config);var database=firebase.database(),provider=new firebase.auth.GoogleAuthProvider;
"use strict";function toggleSignIn(){if(firebase.auth().currentUser)firebase.auth().signOut();else{var e=new firebase.auth.GoogleAuthProvider;e.addScope("https://www.googleapis.com/auth/plus.login"),e.addScope("profile"),e.addScope("email"),firebase.auth().signInWithRedirect(e)}document.getElementById("quickstart-sign-in").disabled=!0}function initApp(){firebase.auth().getRedirectResult().then(function(e){if(e.credential){var i=e.credential.accessToken;console.log(i)}else console.log("token null");e.user})["catch"](function(e){var i=e.code;e.message,e.email,e.credential;"auth/account-exists-with-different-credential"===i?alert("You have already signed up with a different auth provider for that email."):console.error(e)}),firebase.auth().onAuthStateChanged(function(e){e?(displayName=e.displayName,email=e.email,emailVerified=e.emailVerified,photoURL=e.photoURL,isAnonymous=e.isAnonymous,uid=e.uid,refreshToken=e.refreshToken,providerData=e.providerData,document.getElementById("quickstart-sign-in").textContent="Sign out",database.ref("users/"+uid).update({displayName:displayName,email:email,emailVerified:emailVerified,photoURL:photoURL,isAnonymous:isAnonymous,uid:uid,refreshToken:refreshToken,providerData:providerData})):document.getElementById("quickstart-sign-in").textContent="Sign in with Google",document.getElementById("quickstart-sign-in").disabled=!1}),document.getElementById("quickstart-sign-in").addEventListener("click",toggleSignIn,!1)}var displayName,email,emailVerified,photoURL,isAnonymous,uid,refreshToken,providerData;$(document).ready(function(){initApp()});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbmZpZy5qcyIsImxvZ2luLmpzIl0sIm5hbWVzIjpbImNvbmZpZyIsImFwaUtleSIsImF1dGhEb21haW4iLCJkYXRhYmFzZVVSTCIsInN0b3JhZ2VCdWNrZXQiLCJmaXJlYmFzZSIsImluaXRpYWxpemVBcHAiLCJkYXRhYmFzZSIsInByb3ZpZGVyIiwiYXV0aCIsIkdvb2dsZUF1dGhQcm92aWRlciIsInRvZ2dsZVNpZ25JbiIsImN1cnJlbnRVc2VyIiwic2lnbk91dCIsImFkZFNjb3BlIiwic2lnbkluV2l0aFJlZGlyZWN0IiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsImRpc2FibGVkIiwiaW5pdEFwcCIsImdldFJlZGlyZWN0UmVzdWx0IiwidGhlbiIsInJlc3VsdCIsImNyZWRlbnRpYWwiLCJ0b2tlbiIsImFjY2Vzc1Rva2VuIiwiY29uc29sZSIsImxvZyIsInVzZXIiLCJlcnJvciIsImVycm9yQ29kZSIsImNvZGUiLCJtZXNzYWdlIiwiZW1haWwiLCJhbGVydCIsIm9uQXV0aFN0YXRlQ2hhbmdlZCIsImRpc3BsYXlOYW1lIiwiZW1haWxWZXJpZmllZCIsInBob3RvVVJMIiwiaXNBbm9ueW1vdXMiLCJ1aWQiLCJyZWZyZXNoVG9rZW4iLCJwcm92aWRlckRhdGEiLCJ0ZXh0Q29udGVudCIsInJlZiIsInVwZGF0ZSIsImFkZEV2ZW50TGlzdGVuZXIiLCIkIiwicmVhZHkiXSwibWFwcGluZ3MiOiJBQUFBLFlBQUEsSUFBSUEsU0FDQUMsT0FBUSwwQ0FDUkMsV0FBWSxzQ0FDWkMsWUFBYSw2Q0FDYkMsY0FBZSxrQ0FFbkJDLFVBQVNDLGNBQWNOLE9BRXZCLElBQUlPLFVBQVdGLFNBQVNFLFdBQ3BCQyxTQUFXLEdBQUlILFVBQVNJLEtBQUtDO0FDVGpDLFlBQUksU0FBU0MsZ0JBQ0wsR0FBS04sU0FBU0ksT0FBT0csWUFTakJQLFNBQVNJLE9BQU9JLGNBVGMsQ0FDOUIsR0FBSUwsR0FBVyxHQUFJSCxVQUFTSSxLQUFLQyxrQkFFakNGLEdBQVNNLFNBQVMsOENBQ2xCTixFQUFTTSxTQUFTLFdBQ2xCTixFQUFTTSxTQUFTLFNBQ2xCVCxTQUFTSSxPQUFPTSxtQkFBbUJQLEdBS3ZDUSxTQUFTQyxlQUFlLHNCQUFzQkMsVUFBVyxFQVk3RCxRQUFTQyxXQUNMZCxTQUFTSSxPQUFPVyxvQkFBb0JDLEtBQUssU0FBVUMsR0FDL0MsR0FBSUEsRUFBT0MsV0FBWSxDQUVuQixHQUFJQyxHQUFRRixFQUFPQyxXQUFXRSxXQUU5QkMsU0FBUUMsSUFBSUgsT0FFWkUsU0FBUUMsSUFBSSxhQUVMTCxHQUFPTSxPQVR0QnZCLFNBVVMsU0FBVXdCLEdBQ2YsR0FBSUMsR0FBWUQsRUFBTUUsSUFDSEYsR0FBTUcsUUFDYkgsRUFBTUksTUFDREosRUFBTU4sVUFDTCxtREFBZE8sRUFDQUksTUFBTSw2RUFFTlIsUUFBUUcsTUFBTUEsS0FHdEJ4QixTQUFTSSxPQUFPMEIsbUJBQW1CLFNBQVVQLEdBQ3JDQSxHQUNBUSxZQUFjUixFQUFLUSxZQUNuQkgsTUFBUUwsRUFBS0ssTUFDYkksY0FBZ0JULEVBQUtTLGNBQ3JCQyxTQUFXVixFQUFLVSxTQUNoQkMsWUFBY1gsRUFBS1csWUFDbkJDLElBQU1aLEVBQUtZLElBQ1hDLGFBQWViLEVBQUthLGFBQ3BCQyxhQUFlZCxFQUFLYyxhQUVwQjFCLFNBQVNDLGVBQWUsc0JBQXNCMEIsWUFBYyxXQUM1RHBDLFNBQVNxQyxJQUFULFNBQXNCSixLQUFPSyxRQUN6QlQsWUFBYUEsWUFDYkgsTUFBT0EsTUFDUEksY0FBZUEsY0FDZkMsU0FBVUEsU0FDVkMsWUFBYUEsWUFDYkMsSUFBS0EsSUFDTEMsYUFBY0EsYUFDZEMsYUFBY0EsZ0JBR2xCMUIsU0FBU0MsZUFBZSxzQkFBc0IwQixZQUFjLHNCQUVoRTNCLFNBQVNDLGVBQWUsc0JBQXNCQyxVQUFXLElBRTdERixTQUFTQyxlQUFlLHNCQUFzQjZCLGlCQUFpQixRQUFTbkMsY0FBYyxHQTFEMUYsR0FBSXlCLGFBQ0FILE1BQ0FJLGNBQ0FDLFNBQ0FDLFlBQ0FDLElBQ0FDLGFBQ0FDLFlBc0RKSyxHQUFFL0IsVUFBVWdDLE1BQU0sV0FDZDdCIiwiZmlsZSI6InNjcmlwdHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgY29uZmlnID0ge1xyXG4gICAgYXBpS2V5OiBcIkFJemFTeUNSZlJwMjBrRWtwd08xQnMzMHNEeUJrQzRRZi1yc3VOTVwiLFxyXG4gICAgYXV0aERvbWFpbjogXCJjb3Vyc2UtZmlsZS1hdWRpdG9yLmZpcmViYXNlYXBwLmNvbVwiLFxyXG4gICAgZGF0YWJhc2VVUkw6IFwiaHR0cHM6Ly9jb3Vyc2UtZmlsZS1hdWRpdG9yLmZpcmViYXNlaW8uY29tXCIsXHJcbiAgICBzdG9yYWdlQnVja2V0OiBcImNvdXJzZS1maWxlLWF1ZGl0b3IuYXBwc3BvdC5jb21cIixcclxufTtcclxuZmlyZWJhc2UuaW5pdGlhbGl6ZUFwcChjb25maWcpO1xyXG5cclxudmFyIGRhdGFiYXNlID0gZmlyZWJhc2UuZGF0YWJhc2UoKTtcclxudmFyIHByb3ZpZGVyID0gbmV3IGZpcmViYXNlLmF1dGguR29vZ2xlQXV0aFByb3ZpZGVyKCk7XHJcbiIsIiAgICBmdW5jdGlvbiB0b2dnbGVTaWduSW4oKSB7XHJcbiAgICAgICAgaWYgKCFmaXJlYmFzZS5hdXRoKCkuY3VycmVudFVzZXIpIHtcclxuICAgICAgICAgICAgdmFyIHByb3ZpZGVyID0gbmV3IGZpcmViYXNlLmF1dGguR29vZ2xlQXV0aFByb3ZpZGVyKCk7XHJcblxyXG4gICAgICAgICAgICBwcm92aWRlci5hZGRTY29wZSgnaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vYXV0aC9wbHVzLmxvZ2luJyk7XHJcbiAgICAgICAgICAgIHByb3ZpZGVyLmFkZFNjb3BlKCdwcm9maWxlJyk7XHJcbiAgICAgICAgICAgIHByb3ZpZGVyLmFkZFNjb3BlKCdlbWFpbCcpO1xyXG4gICAgICAgICAgICBmaXJlYmFzZS5hdXRoKCkuc2lnbkluV2l0aFJlZGlyZWN0KHByb3ZpZGVyKTtcclxuXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgZmlyZWJhc2UuYXV0aCgpLnNpZ25PdXQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3F1aWNrc3RhcnQtc2lnbi1pbicpLmRpc2FibGVkID0gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgZGlzcGxheU5hbWUsXHJcbiAgICAgICAgZW1haWwsXHJcbiAgICAgICAgZW1haWxWZXJpZmllZCxcclxuICAgICAgICBwaG90b1VSTCxcclxuICAgICAgICBpc0Fub255bW91cyxcclxuICAgICAgICB1aWQsXHJcbiAgICAgICAgcmVmcmVzaFRva2VuLFxyXG4gICAgICAgIHByb3ZpZGVyRGF0YTtcclxuXHJcbiAgICBmdW5jdGlvbiBpbml0QXBwKCkge1xyXG4gICAgICAgIGZpcmViYXNlLmF1dGgoKS5nZXRSZWRpcmVjdFJlc3VsdCgpLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xyXG4gICAgICAgICAgICBpZiAocmVzdWx0LmNyZWRlbnRpYWwpIHtcclxuICAgICAgICAgICAgICAgIC8vIFRoaXMgZ2l2ZXMgeW91IGEgR29vZ2xlIEFjY2VzcyBUb2tlbi4gWW91IGNhbiB1c2UgaXQgdG8gYWNjZXNzIHRoZSBHb29nbGUgQVBJLlxyXG4gICAgICAgICAgICAgICAgdmFyIHRva2VuID0gcmVzdWx0LmNyZWRlbnRpYWwuYWNjZXNzVG9rZW47XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2codG9rZW4pO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3Rva2VuIG51bGwnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgdXNlciA9IHJlc3VsdC51c2VyO1xyXG4gICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikge1xyXG4gICAgICAgICAgICB2YXIgZXJyb3JDb2RlID0gZXJyb3IuY29kZTtcclxuICAgICAgICAgICAgdmFyIGVycm9yTWVzc2FnZSA9IGVycm9yLm1lc3NhZ2U7XHJcbiAgICAgICAgICAgIHZhciBlbWFpbCA9IGVycm9yLmVtYWlsO1xyXG4gICAgICAgICAgICB2YXIgY3JlZGVudGlhbCA9IGVycm9yLmNyZWRlbnRpYWw7XHJcbiAgICAgICAgICAgIGlmIChlcnJvckNvZGUgPT09ICdhdXRoL2FjY291bnQtZXhpc3RzLXdpdGgtZGlmZmVyZW50LWNyZWRlbnRpYWwnKSB7XHJcbiAgICAgICAgICAgICAgICBhbGVydCgnWW91IGhhdmUgYWxyZWFkeSBzaWduZWQgdXAgd2l0aCBhIGRpZmZlcmVudCBhdXRoIHByb3ZpZGVyIGZvciB0aGF0IGVtYWlsLicpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICBmaXJlYmFzZS5hdXRoKCkub25BdXRoU3RhdGVDaGFuZ2VkKGZ1bmN0aW9uICh1c2VyKSB7XHJcbiAgICAgICAgICAgIGlmICh1c2VyKSB7XHJcbiAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZSA9IHVzZXIuZGlzcGxheU5hbWU7XHJcbiAgICAgICAgICAgICAgICBlbWFpbCA9IHVzZXIuZW1haWw7XHJcbiAgICAgICAgICAgICAgICBlbWFpbFZlcmlmaWVkID0gdXNlci5lbWFpbFZlcmlmaWVkO1xyXG4gICAgICAgICAgICAgICAgcGhvdG9VUkwgPSB1c2VyLnBob3RvVVJMO1xyXG4gICAgICAgICAgICAgICAgaXNBbm9ueW1vdXMgPSB1c2VyLmlzQW5vbnltb3VzO1xyXG4gICAgICAgICAgICAgICAgdWlkID0gdXNlci51aWQ7XHJcbiAgICAgICAgICAgICAgICByZWZyZXNoVG9rZW4gPSB1c2VyLnJlZnJlc2hUb2tlbjtcclxuICAgICAgICAgICAgICAgIHByb3ZpZGVyRGF0YSA9IHVzZXIucHJvdmlkZXJEYXRhO1xyXG5cclxuICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdxdWlja3N0YXJ0LXNpZ24taW4nKS50ZXh0Q29udGVudCA9ICdTaWduIG91dCc7XHJcbiAgICAgICAgICAgICAgICBkYXRhYmFzZS5yZWYoYHVzZXJzLyR7dWlkfWApLnVwZGF0ZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWU6IGRpc3BsYXlOYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgIGVtYWlsOiBlbWFpbCxcclxuICAgICAgICAgICAgICAgICAgICBlbWFpbFZlcmlmaWVkOiBlbWFpbFZlcmlmaWVkLFxyXG4gICAgICAgICAgICAgICAgICAgIHBob3RvVVJMOiBwaG90b1VSTCxcclxuICAgICAgICAgICAgICAgICAgICBpc0Fub255bW91czogaXNBbm9ueW1vdXMsXHJcbiAgICAgICAgICAgICAgICAgICAgdWlkOiB1aWQsXHJcbiAgICAgICAgICAgICAgICAgICAgcmVmcmVzaFRva2VuOiByZWZyZXNoVG9rZW4sXHJcbiAgICAgICAgICAgICAgICAgICAgcHJvdmlkZXJEYXRhOiBwcm92aWRlckRhdGFcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3F1aWNrc3RhcnQtc2lnbi1pbicpLnRleHRDb250ZW50ID0gJ1NpZ24gaW4gd2l0aCBHb29nbGUnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdxdWlja3N0YXJ0LXNpZ24taW4nKS5kaXNhYmxlZCA9IGZhbHNlO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdxdWlja3N0YXJ0LXNpZ24taW4nKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRvZ2dsZVNpZ25JbiwgZmFsc2UpO1xyXG4gICAgfVxyXG5cclxuICAgICQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpbml0QXBwKCk7XHJcbiAgICB9KTsiXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
