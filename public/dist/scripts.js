"use strict";var config={apiKey:"AIzaSyCBNNxQ8ewVWXxMUFYXmGAGTv0IQ3ejje0",authDomain:"room-of-requirement.firebaseapp.com",databaseURL:"https://room-of-requirement.firebaseio.com",storageBucket:"firebase-room-of-requirement.appspot.com"};firebase.initializeApp(config);var database=firebase.database(),provider=new firebase.auth.GoogleAuthProvider;
"use strict";function toggleSignIn(){if(firebase.auth().currentUser)firebase.auth().signOut();else{var t=new firebase.auth.GoogleAuthProvider;t.addScope("https://www.googleapis.com/auth/plus.login"),firebase.auth().signInWithRedirect(t)}document.getElementById("quickstart-sign-in").disabled=!0}function initApp(){firebase.auth().getRedirectResult().then(function(t){if(t.credential){var e=t.credential.accessToken;document.getElementById("quickstart-oauthtoken").textContent=e}else document.getElementById("quickstart-oauthtoken").textContent="null";t.user})["catch"](function(t){var e=t.code;t.message,t.email,t.credential;"auth/account-exists-with-different-credential"===e?alert("You have already signed up with a different auth provider for that email."):console.error(t)}),firebase.auth().onAuthStateChanged(function(t){if(t){var e=t.displayName,n=t.email,i=t.emailVerified,a=t.photoURL,o=t.isAnonymous,u=t.uid,s=t.refreshToken,d=t.providerData;document.getElementById("quickstart-sign-in-status").textContent="Signed in",document.getElementById("quickstart-sign-in").textContent="Sign out",document.getElementById("quickstart-account-details").textContent=JSON.stringify({displayName:e,email:n,emailVerified:i,photoURL:a,isAnonymous:o,uid:u,refreshToken:s,providerData:d},null,"  ")}else document.getElementById("quickstart-sign-in-status").textContent="Signed out",document.getElementById("quickstart-sign-in").textContent="Sign in with Google",document.getElementById("quickstart-account-details").textContent="null",document.getElementById("quickstart-oauthtoken").textContent="null";document.getElementById("quickstart-sign-in").disabled=!1}),document.getElementById("quickstart-sign-in").addEventListener("click",toggleSignIn,!1)}window.onload=function(){initApp()};
"use strict";function toggleSignIn(){if(firebase.auth().currentUser)firebase.auth().signOut();else{var t=new firebase.auth.GoogleAuthProvider;t.addScope("https://www.googleapis.com/auth/plus.login"),firebase.auth().signInWithRedirect(t)}document.getElementById("quickstart-sign-in").disabled=!0}function initApp(){firebase.auth().getRedirectResult().then(function(t){if(t.credential){var e=t.credential.accessToken;document.getElementById("quickstart-oauthtoken").textContent=e}else document.getElementById("quickstart-oauthtoken").textContent="null";t.user})["catch"](function(t){var e=t.code;t.message,t.email,t.credential,"auth/account-exists-with-different-credential"===e?alert("You have already signed up with a different auth provider for that email."):console.error(t)}),firebase.auth().onAuthStateChanged(function(t){if(t){var e=t.displayName,n=t.email,i=t.emailVerified,a=t.photoURL,o=t.isAnonymous,u=t.uid,s=t.refreshToken,d=t.providerData;document.getElementById("quickstart-sign-in-status").textContent="Signed in",document.getElementById("quickstart-sign-in").textContent="Sign out",document.getElementById("quickstart-account-details").textContent=JSON.stringify({displayName:e,email:n,emailVerified:i,photoURL:a,isAnonymous:o,uid:u,refreshToken:s,providerData:d},null,"  ")}else document.getElementById("quickstart-sign-in-status").textContent="Signed out",document.getElementById("quickstart-sign-in").textContent="Sign in with Google",document.getElementById("quickstart-account-details").textContent="null",document.getElementById("quickstart-oauthtoken").textContent="null";document.getElementById("quickstart-sign-in").disabled=!1}),document.getElementById("quickstart-sign-in").addEventListener("click",toggleSignIn,!1)}window.onload=function(){initApp()};
"use strict";database.ref("courses").on("value",function(e){console.log(e.val())});
//# sourceMappingURL=data:application/json;base64,
