"use strict";var config={apiKey:"AIzaSyCRfRp20kEkpwO1Bs30sDyBkC4Qf-rsuNM",authDomain:"course-file-auditor.firebaseapp.com",databaseURL:"https://course-file-auditor.firebaseio.com",storageBucket:"course-file-auditor.appspot.com"};firebase.initializeApp(config);var database=firebase.database(),provider=new firebase.auth.GoogleAuthProvider;
"use strict";function toggleSignIn(){if(firebase.auth().currentUser)firebase.auth().signOut();else{var e=new firebase.auth.GoogleAuthProvider;e.addScope("https://www.googleapis.com/auth/plus.login"),e.addScope("profile"),e.addScope("email"),firebase.auth().signInWithRedirect(e)}document.getElementById("quickstart-sign-in").disabled=!0}function initApp(){firebase.auth().getRedirectResult().then(function(e){if(e.credential){var i=e.credential.accessToken;console.log(i)}else console.log("token null");e.user})["catch"](function(e){var i=e.code;e.message,e.email,e.credential;"auth/account-exists-with-different-credential"===i?alert("You have already signed up with a different auth provider for that email."):console.error(e)}),firebase.auth().onAuthStateChanged(function(e){e?(displayName=e.displayName,email=e.email,emailVerified=e.emailVerified,photoURL=e.photoURL,isAnonymous=e.isAnonymous,uid=e.uid,refreshToken=e.refreshToken,providerData=e.providerData,document.getElementById("quickstart-sign-in").textContent="Sign out",database.ref("users/"+uid).update({displayName:displayName,email:email,emailVerified:emailVerified,photoURL:photoURL,isAnonymous:isAnonymous,uid:uid,refreshToken:refreshToken,providerData:providerData})):document.getElementById("quickstart-sign-in").textContent="Sign in with Google",document.getElementById("quickstart-sign-in").disabled=!1}),document.getElementById("quickstart-sign-in").addEventListener("click",toggleSignIn,!1)}var displayName,email,emailVerified,photoURL,isAnonymous,uid,refreshToken,providerData;
"use strict";var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol?"symbol":typeof t};!function(t,e){t.wand=e()}("undefined"!=typeof window?window:void 0,function(){var t={apndr:function(t,e){if("object"!==("undefined"==typeof t?"undefined":_typeof(t))||"object"!==("undefined"==typeof e?"undefined":_typeof(e))||Array.isArray(e))if("object"!==("undefined"==typeof t?"undefined":_typeof(t)))console.error("First parameter passed is not an object element.");else if("object"!==("undefined"==typeof e?"undefined":_typeof(e)))"string"!=typeof e&&"number"!=typeof e||t.appendChild(this.txt(e));else if(Array.isArray(e))for(var r=e,n=0;n<r.length;n++)this.apndr(t,r[n]);else console.error("Parameters are not compatible in the lib.apndr function.  Hit the arrow on the left for call stack.");else t.appendChild(e)},querApndr:function(t,e,r){var n=document.querySelector(t);if(null!=n){if(Array.isArray(e))for(var o=e,i=0;i<o.length;i++)this.apndr(n,this.crtElm(o[i]));else r?this.apndr(n,this.crtElm(e,r)):this.apndr(n,e);return n}console.error("No tag exists in the DOM. Hit the arrow on the left for call stack.")},querAttr:function(t,e,r){var n=document.querySelector(t);null==n?console.error("No tag exists in the DOM. Hit the arrow on the left for call stack."):e&&n.setAttribute(e,r)},txt:function(t){return"string"==typeof t?document.createTextNode(t):"number"==typeof t?document.createTextNode(t.toString()):void console.error("Parameter passed to lib.txt is not a string nor a number.  Hit the arrow on the left for call stack.")},crtElm:function(t,e){var r,n=document.createElement(t);return e&&("string"==typeof e?(r=this.txt(e),this.apndr(n,r)):console.error("Must pass a string as the second param in lib.crtElm function.  Hit the arrow on the left for call stack.")),n}};return t});
"use strict";!function(a){function n(a,n){var t=wand.crtElm("section"),o=wand.crtElm("h2","Project Number "+a);o.className="courseTitle",wand.apndr(t,o),wand.querApndr("main article",t)}var t,o;a.startCourseLoad=function(){database.ref("Mark's Tool").once("child_added",function(a){o=a.val(),t=a.key,n(t,o)})},a.onload=function(){a.startCourseLoad(),initApp()}}(window);
"use strict";!function(){function e(){wand.querApndr("article","h1","Profile want to be seen?  Not yet!")}function t(){wand.querApndr("article","h1","Stats want to be seen?  Not yet!")}function n(e,t){database.ref(t).once("value",function(t){var n=t.val();"False"===n.Checked?e.checked=!1:"True"===n.Checked&&(e.checked=!0)}),e.onclick=function(n){e.checked===!1?(console.log(!1),database.ref(t).update({Checked:"False"})):e.checked===!0&&(console.log(e,t),database.ref(t).update({Checked:"True"}))}}function a(e,t){var a=wand.crtElm("div");a.id="todoContain";for(var r in e){var o=wand.crtElm("h3",r),i=wand.crtElm("div"),d=wand.crtElm("div");i.id="todo",d.id="details",d.setAttribute("display","false"),"false"===d.getAttribute("display")&&(d.style.display="none");for(var l in e[r]){var c=wand.crtElm("label",l+" | "),s=wand.crtElm("input"),u=wand.txt(" "+e[r][l]["Links Broken"]+" broken Links | "),f="Mark's Tool/"+t+"/Content Pages/"+r+"/"+l;s.type="checkbox",n(s,f),wand.apndr(c,u),wand.apndr(c,s),wand.apndr(d,c)}wand.apndr(i,o),wand.apndr(a,i),wand.apndr(a,d),wand.querApndr("article",a)}}function r(e){"There is nothing here!"===e?wand.querApndr("article","p","Quizzes are okay! "+e):console.log("Load a quiz table for the conversion!")}function o(e){var t=wand.crtElm("a","IL3 Link"),n=wand.crtElm("p");t.href=e,wand.apndr(n,t),wand.querApndr("article",n)}function i(e,t){o(e.Link),r(e.Quizzes),a(e["Content Pages"],t)}function d(e){var t,n=e.target.innerText.split("Project Number ")[1];database.ref("Mark's Tool/"+n).once("value",function(e){t=e.val(),i(t,n)})}function l(){s.innerHTML=""}function c(e,t){"false"===e?(t.style.display="block",t.setAttribute("display","true")):"true"===e&&(t.style.display="none",t.setAttribute("display","false"))}var s=wand.querApndr("article");document.onclick=function(n){var a=n.target.innerText.indexOf("Project")>-1,r="h2"===n.target.localName,o="button"===n.target.localName,i=n.target.innerText.indexOf("Home")>-1,s=n.target.innerText.indexOf("Profile")>-1,u=n.target.innerText.indexOf("Stats")>-1,f=n.target.localName,p=n.target.innerText.indexOf("Lesson")>-1;"checkbox"===n.target.type;if(a&&r)console.log("Project Clicked!"),l(),d(n);else if(i&&o)console.log("Home Clicked!"),l(),window.startCourseLoad();else if(s&&o)console.log("Profile clicked!"),l(),e();else if(u&&o)console.log("Stats clicked!"),l(),t();else{if(!f||!p)return;var k=n.target.parentElement.nextElementSibling,w=k.getAttribute("display");c(w,k)}}}();
"use strict";!function(){var t={home:"Home",profile:"My Profile",stats:"Stats"};for(var r in t)wand.querApndr("nav","button",t[r])}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbmZpZy5qcyIsImxvZ2luLmpzIiwid2FuZC5qcyIsIm1haW4uanMiLCJjbGlja2hhbmRsZXIuanMiLCJuYXYuanMiXSwibmFtZXMiOlsiY29uZmlnIiwiYXBpS2V5IiwiYXV0aERvbWFpbiIsImRhdGFiYXNlVVJMIiwic3RvcmFnZUJ1Y2tldCIsImZpcmViYXNlIiwiaW5pdGlhbGl6ZUFwcCIsImRhdGFiYXNlIiwicHJvdmlkZXIiLCJhdXRoIiwiR29vZ2xlQXV0aFByb3ZpZGVyIiwidG9nZ2xlU2lnbkluIiwiY3VycmVudFVzZXIiLCJzaWduT3V0IiwiYWRkU2NvcGUiLCJzaWduSW5XaXRoUmVkaXJlY3QiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwiZGlzYWJsZWQiLCJpbml0QXBwIiwiZ2V0UmVkaXJlY3RSZXN1bHQiLCJ0aGVuIiwicmVzdWx0IiwiY3JlZGVudGlhbCIsInRva2VuIiwiYWNjZXNzVG9rZW4iLCJjb25zb2xlIiwibG9nIiwidXNlciIsImVycm9yIiwiZXJyb3JDb2RlIiwiY29kZSIsIm1lc3NhZ2UiLCJlbWFpbCIsImFsZXJ0Iiwib25BdXRoU3RhdGVDaGFuZ2VkIiwiZGlzcGxheU5hbWUiLCJlbWFpbFZlcmlmaWVkIiwicGhvdG9VUkwiLCJpc0Fub255bW91cyIsInVpZCIsInJlZnJlc2hUb2tlbiIsInByb3ZpZGVyRGF0YSIsInRleHRDb250ZW50IiwicmVmIiwidXBkYXRlIiwiYWRkRXZlbnRMaXN0ZW5lciIsIl90eXBlb2YiLCJTeW1ib2wiLCJpdGVyYXRvciIsIm9iaiIsImNvbnN0cnVjdG9yIiwiZ2xvIiwibGliIiwid2FuZCIsIndpbmRvdyIsInVuZGVmaW5lZCIsImFwbmRyIiwiYSIsImIiLCJBcnJheSIsImlzQXJyYXkiLCJhcHBlbmRDaGlsZCIsInRoaXMiLCJ0eHQiLCJhcnIiLCJpIiwibGVuZ3RoIiwicXVlckFwbmRyIiwiYyIsImVsZSIsInF1ZXJ5U2VsZWN0b3IiLCJjcnRFbG0iLCJxdWVyQXR0ciIsInNldEF0dHJpYnV0ZSIsImNyZWF0ZVRleHROb2RlIiwidG9TdHJpbmciLCJjcmVhdGVFbGVtZW50IiwiZ2VuZXJhdGVDb3Vyc2VQcmV2aWV3IiwiaWQiLCJkZXRhaWxzIiwic2VjdGlvbiIsImhlYWRlciIsImNsYXNzTmFtZSIsImNvdXJzZV9pZCIsImNvdXJzZV9kZXRhaWxzIiwic3RhcnRDb3Vyc2VMb2FkIiwib25jZSIsInNuYXAiLCJ2YWwiLCJrZXkiLCJvbmxvYWQiLCJsb2FkUHJvZmlsZSIsImxvYWRTdGF0cyIsImxvYWRDaGVja2VkIiwiaW5wdXQiLCJzZWFyY2hRdWVyIiwicGVyc29uYWxEYXRhIiwiQ2hlY2tlZCIsImNoZWNrZWQiLCJvbmNsaWNrIiwiZSIsImxvYWRDb250ZW50VG9kbyIsImNwIiwiY24iLCJ0b2RvQ29udGFpbiIsImgzIiwidG9kbyIsImRpdnN1YiIsImdldEF0dHJpYnV0ZSIsInN0eWxlIiwiZGlzcGxheSIsImoiLCJzdWJwIiwibnVtTGlua3MiLCJ0eXBlIiwicXVpekxvYWQiLCJxIiwiZGlzTGluayIsImwiLCJsaW5rIiwicGFyYSIsImhyZWYiLCJkaXNwbGF5RGV0YWlscyIsImNkIiwiTGluayIsIlF1aXp6ZXMiLCJsb2FkQ291cnNlRGV0YWlscyIsImNvdXJzZURldGFpbHMiLCJjb3Vyc2VOdW0iLCJ0YXJnZXQiLCJpbm5lclRleHQiLCJzcGxpdCIsImNsZWFyQXJ0aWNsZSIsImFydGljbGUiLCJpbm5lckhUTUwiLCJkcm9wZG93biIsImRpc0Jvb2wiLCJuZXh0U2liIiwicHJvamVjdCIsImluZGV4T2YiLCJoMmxvY2FsIiwibG9jYWxOYW1lIiwiYnV0dG9ubG9jYWwiLCJob21lIiwicHJvZmlsZSIsInN0YXRzIiwiaDNsb2NhbCIsImxlc3Nvbk51bSIsInBhcmVudEVsZW1lbnQiLCJuZXh0RWxlbWVudFNpYmxpbmciLCJuYXZpZyJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBQSxJQUFJQSxTQUNBQyxPQUFRLDBDQUNSQyxXQUFZLHNDQUNaQyxZQUFhLDZDQUNiQyxjQUFl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QUNqQ2IsRUFBVUMsRUFBUTdCLGFBQWEsVUFDbkMyQixHQUFTQyxFQUFTQztBQzFKOUIsY0FBQyxXQUdHLEdBQUlhLElBQ0FQLEtBQU0sT0FDTkMsUUFBUyxhQUNUQyxNQUFPLFFBR1gsS0FBSyxHQUFJaEYsS0FBS3FGLEdBQ1ZqRyxLQUFLYyxVQUFVLE1BQU8sU0FBVW1GLEVBQU1yRiIsImZpbGUiOiJzY3JpcHRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGNvbmZpZyA9IHtcclxuICAgIGFwaUtleTogXCJBSXphU3lDUmZScDIwa0VrcHdPMUJzMzBzRHlCa0M0UWYtcnN1Tk1cIixcclxuICAgIGF1dGhEb21haW46IFwiY291cnNlLWZpbGUtYXVkaXRvci5maXJlYmFzZWFwcC5jb21cIixcclxuICAgIGRhdGFiYXNlVVJMOiBcImh0dHBzOi8vY291cnNlLWZpbGUtYXVkaXRvci5maXJlYmFzZWlvLmNvbVwiLFxyXG4gICAgc3RvcmFnZUJ1Y2tldDogXCJjb3Vyc2UtZmlsZS1hdWRpdG9yLmFwcHNwb3QuY29tXCIsXHJcbn07XHJcbmZpcmViYXNlLmluaXRpYWxpemVBcHAoY29uZmlnKTtcclxuXHJcbnZhciBkYXRhYmFzZSA9IGZpcmViYXNlLmRhdGFiYXNlKCk7XHJcbnZhciBwcm92aWRlciA9IG5ldyBmaXJlYmFzZS5hdXRoLkdvb2dsZUF1dGhQcm92aWRlcigpO1xyXG4iLCIgICAgZnVuY3Rpb24gdG9nZ2xlU2lnbkluKCkge1xyXG4gICAgICAgIGlmICghZmlyZWJhc2UuYXV0aCgpLmN1cnJlbnRVc2VyKSB7XHJcbiAgICAgICAgICAgIHZhciBwcm92aWRlciA9IG5ldyBmaXJlYmFzZS5hdXRoLkdvb2dsZUF1dGhQcm92aWRlcigpO1xyXG5cclxuICAgICAgICAgICAgcHJvdmlkZXIuYWRkU2NvcGUoJ2h0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL2F1dGgvcGx1cy5sb2dpbicpO1xyXG4gICAgICAgICAgICBwcm92aWRlci5hZGRTY29wZSgncHJvZmlsZScpO1xyXG4gICAgICAgICAgICBwcm92aWRlci5hZGRTY29wZSgnZW1haWwnKTtcclxuICAgICAgICAgICAgZmlyZWJhc2UuYXV0aCgpLnNpZ25JbldpdGhSZWRpcmVjdChwcm92aWRlcik7XHJcblxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGZpcmViYXNlLmF1dGgoKS5zaWduT3V0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdxdWlja3N0YXJ0LXNpZ24taW4nKS5kaXNhYmxlZCA9IHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIGRpc3BsYXlOYW1lLFxyXG4gICAgICAgIGVtYWlsLFxyXG4gICAgICAgIGVtYWlsVmVyaWZpZWQsXHJcbiAgICAgICAgcGhvdG9VUkwsXHJcbiAgICAgICAgaXNBbm9ueW1vdXMsXHJcbiAgICAgICAgdWlkLFxyXG4gICAgICAgIHJlZnJlc2hUb2tlbixcclxuICAgICAgICBwcm92aWRlckRhdGE7XHJcblxyXG4gICAgZnVuY3Rpb24gaW5pdEFwcCgpIHtcclxuICAgICAgICBmaXJlYmFzZS5hdXRoKCkuZ2V0UmVkaXJlY3RSZXN1bHQoKS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcclxuICAgICAgICAgICAgaWYgKHJlc3VsdC5jcmVkZW50aWFsKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBUaGlzIGdpdmVzIHlvdSBhIEdvb2dsZSBBY2Nlc3MgVG9rZW4uIFlvdSBjYW4gdXNlIGl0IHRvIGFjY2VzcyB0aGUgR29vZ2xlIEFQSS5cclxuICAgICAgICAgICAgICAgIHZhciB0b2tlbiA9IHJlc3VsdC5jcmVkZW50aWFsLmFjY2Vzc1Rva2VuO1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHRva2VuKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCd0b2tlbiBudWxsJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIHVzZXIgPSByZXN1bHQudXNlcjtcclxuICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHtcclxuICAgICAgICAgICAgdmFyIGVycm9yQ29kZSA9IGVycm9yLmNvZGU7XHJcbiAgICAgICAgICAgIHZhciBlcnJvck1lc3NhZ2UgPSBlcnJvci5tZXNzYWdlO1xyXG4gICAgICAgICAgICB2YXIgZW1haWwgPSBlcnJvci5lbWFpbDtcclxuICAgICAgICAgICAgdmFyIGNyZWRlbnRpYWwgPSBlcnJvci5jcmVkZW50aWFsO1xyXG4gICAgICAgICAgICBpZiAoZXJyb3JDb2RlID09PSAnYXV0aC9hY2NvdW50LWV4aXN0cy13aXRoLWRpZmZlcmVudC1jcmVkZW50aWFsJykge1xyXG4gICAgICAgICAgICAgICAgYWxlcnQoJ1lvdSBoYXZlIGFscmVhZHkgc2lnbmVkIHVwIHdpdGggYSBkaWZmZXJlbnQgYXV0aCBwcm92aWRlciBmb3IgdGhhdCBlbWFpbC4nKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgZmlyZWJhc2UuYXV0aCgpLm9uQXV0aFN0YXRlQ2hhbmdlZChmdW5jdGlvbiAodXNlcikge1xyXG4gICAgICAgICAgICBpZiAodXNlcikge1xyXG4gICAgICAgICAgICAgICAgZGlzcGxheU5hbWUgPSB1c2VyLmRpc3BsYXlOYW1lO1xyXG4gICAgICAgICAgICAgICAgZW1haWwgPSB1c2VyLmVtYWlsO1xyXG4gICAgICAgICAgICAgICAgZW1haWxWZXJpZmllZCA9IHVzZXIuZW1haWxWZXJpZmllZDtcclxuICAgICAgICAgICAgICAgIHBob3RvVVJMID0gdXNlci5waG90b1VSTDtcclxuICAgICAgICAgICAgICAgIGlzQW5vbnltb3VzID0gdXNlci5pc0Fub255bW91cztcclxuICAgICAgICAgICAgICAgIHVpZCA9IHVzZXIudWlkO1xyXG4gICAgICAgICAgICAgICAgcmVmcmVzaFRva2VuID0gdXNlci5yZWZyZXNoVG9rZW47XHJcbiAgICAgICAgICAgICAgICBwcm92aWRlckRhdGEgPSB1c2VyLnByb3ZpZGVyRGF0YTtcclxuXHJcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncXVpY2tzdGFydC1zaWduLWluJykudGV4dENvbnRlbnQgPSAnU2lnbiBvdXQnO1xyXG4gICAgICAgICAgICAgICAgZGF0YWJhc2UucmVmKGB1c2Vycy8ke3VpZH1gKS51cGRhdGUoe1xyXG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lOiBkaXNwbGF5TmFtZSxcclxuICAgICAgICAgICAgICAgICAgICBlbWFpbDogZW1haWwsXHJcbiAgICAgICAgICAgICAgICAgICAgZW1haWxWZXJpZmllZDogZW1haWxWZXJpZmllZCxcclxuICAgICAgICAgICAgICAgICAgICBwaG90b1VSTDogcGhvdG9VUkwsXHJcbiAgICAgICAgICAgICAgICAgICAgaXNBbm9ueW1vdXM6IGlzQW5vbnltb3VzLFxyXG4gICAgICAgICAgICAgICAgICAgIHVpZDogdWlkLFxyXG4gICAgICAgICAgICAgICAgICAgIHJlZnJlc2hUb2tlbjogcmVmcmVzaFRva2VuLFxyXG4gICAgICAgICAgICAgICAgICAgIHByb3ZpZGVyRGF0YTogcHJvdmlkZXJEYXRhXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdxdWlja3N0YXJ0LXNpZ24taW4nKS50ZXh0Q29udGVudCA9ICdTaWduIGluIHdpdGggR29vZ2xlJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncXVpY2tzdGFydC1zaWduLWluJykuZGlzYWJsZWQgPSBmYWxzZTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncXVpY2tzdGFydC1zaWduLWluJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0b2dnbGVTaWduSW4sIGZhbHNlKTtcclxuICAgIH0iLCIoZnVuY3Rpb24gKGdsbywgbGliKSB7XG4gICAgZ2xvLndhbmQgPSBsaWIoKTtcbn0odHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHRoaXMsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgbGliID0ge1xuICAgICAgICBhcG5kcjogZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgYSA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgYiA9PT0gXCJvYmplY3RcIiAmJiAhQXJyYXkuaXNBcnJheShiKSkge1xuICAgICAgICAgICAgICAgIGEuYXBwZW5kQ2hpbGQoYik7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBhICE9PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkZpcnN0IHBhcmFtZXRlciBwYXNzZWQgaXMgbm90IGFuIG9iamVjdCBlbGVtZW50LlwiKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGIgIT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGIgPT09IFwic3RyaW5nXCIgfHwgdHlwZW9mIGIgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgYS5hcHBlbmRDaGlsZCh0aGlzLnR4dChiKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGIpKSB7XG4gICAgICAgICAgICAgICAgdmFyIGFyciA9IGI7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hcG5kcihhLCBhcnJbaV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIlBhcmFtZXRlcnMgYXJlIG5vdCBjb21wYXRpYmxlIGluIHRoZSBsaWIuYXBuZHIgZnVuY3Rpb24uICBIaXQgdGhlIGFycm93IG9uIHRoZSBsZWZ0IGZvciBjYWxsIHN0YWNrLlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgcXVlckFwbmRyOiBmdW5jdGlvbiAoYSwgYiwgYykge1xuICAgICAgICAgICAgdmFyIGVsZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYSk7XG4gICAgICAgICAgICBpZiAoZWxlID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiTm8gdGFnIGV4aXN0cyBpbiB0aGUgRE9NLiBIaXQgdGhlIGFycm93IG9uIHRoZSBsZWZ0IGZvciBjYWxsIHN0YWNrLlwiKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoYikpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFyciA9IGI7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFwbmRyKGVsZSwgdGhpcy5jcnRFbG0oYXJyW2ldKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGMpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hcG5kcihlbGUsIHRoaXMuY3J0RWxtKGIsIGMpKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmFwbmRyKGVsZSwgYilcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVsZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgcXVlckF0dHI6IGZ1bmN0aW9uIChhLCBiLCBjKSB7XG4gICAgICAgICAgICB2YXIgZWxlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihhKTtcbiAgICAgICAgICAgIGlmIChlbGUgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJObyB0YWcgZXhpc3RzIGluIHRoZSBET00uIEhpdCB0aGUgYXJyb3cgb24gdGhlIGxlZnQgZm9yIGNhbGwgc3RhY2suXCIpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoYikge1xuICAgICAgICAgICAgICAgICAgICBlbGUuc2V0QXR0cmlidXRlKGIsIGMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgdHh0OiBmdW5jdGlvbiAoYSkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBhID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGEpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgYSA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgICAgIHJldHVybiBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShhLnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiUGFyYW1ldGVyIHBhc3NlZCB0byBsaWIudHh0IGlzIG5vdCBhIHN0cmluZyBub3IgYSBudW1iZXIuICBIaXQgdGhlIGFycm93IG9uIHRoZSBsZWZ0IGZvciBjYWxsIHN0YWNrLlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY3J0RWxtOiBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICAgICAgdmFyIGVsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoYSksXG4gICAgICAgICAgICAgICAgdHh0O1xuICAgICAgICAgICAgaWYgKGIpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGIgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgdHh0ID0gdGhpcy50eHQoYik7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYXBuZHIoZWxlLCB0eHQpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJNdXN0IHBhc3MgYSBzdHJpbmcgYXMgdGhlIHNlY29uZCBwYXJhbSBpbiBsaWIuY3J0RWxtIGZ1bmN0aW9uLiAgSGl0IHRoZSBhcnJvdyBvbiB0aGUgbGVmdCBmb3IgY2FsbCBzdGFjay5cIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGVsZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbGliO1xufSkpO1xuIiwiKGZ1bmN0aW9uICh3aW5kb3cpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICB2YXIgY291cnNlX2lkLFxuICAgICAgICBjb3Vyc2VfZGV0YWlscztcblxuICAgIGZ1bmN0aW9uIGdlbmVyYXRlQ291cnNlUHJldmlldyhpZCwgZGV0YWlscykge1xuICAgICAgICB2YXIgc2VjdGlvbiA9IHdhbmQuY3J0RWxtKFwic2VjdGlvblwiKTtcbiAgICAgICAgdmFyIGhlYWRlciA9IHdhbmQuY3J0RWxtKFwiaDJcIiwgYFByb2plY3QgTnVtYmVyICR7aWR9YCk7XG4gICAgICAgICAgICBoZWFkZXIuY2xhc3NOYW1lID0gXCJjb3Vyc2VUaXRsZVwiO1xuICAgICAgICB3YW5kLmFwbmRyKHNlY3Rpb24sIGhlYWRlcik7XG5cbiAgICAgICAgd2FuZC5xdWVyQXBuZHIoXCJtYWluIGFydGljbGVcIiwgc2VjdGlvbik7XG4gICAgfVxuXG4gICAgd2luZG93LnN0YXJ0Q291cnNlTG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBkYXRhYmFzZS5yZWYoXCJNYXJrJ3MgVG9vbFwiKS5vbmNlKFwiY2hpbGRfYWRkZWRcIiwgZnVuY3Rpb24gKHNuYXApIHtcbiAgICAgICAgICAgIGNvdXJzZV9kZXRhaWxzID0gc25hcC52YWwoKTtcbiAgICAgICAgICAgIGNvdXJzZV9pZCA9IHNuYXAua2V5O1xuXG4gICAgICAgICAgICBnZW5lcmF0ZUNvdXJzZVByZXZpZXcoY291cnNlX2lkLCBjb3Vyc2VfZGV0YWlscyk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBcbiAgICB3aW5kb3cub25sb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHdpbmRvdy5zdGFydENvdXJzZUxvYWQoKTtcbiAgICAgICAgaW5pdEFwcCgpO1xuICAgIH1cbn0od2luZG93KSk7XG4iLCIoZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG4gICAgdmFyIGFydGljbGUgPSB3YW5kLnF1ZXJBcG5kcihcImFydGljbGVcIik7XHJcblxyXG4gICAgZnVuY3Rpb24gbG9hZFByb2ZpbGUoKSB7XHJcbiAgICAgICAgd2FuZC5xdWVyQXBuZHIoXCJhcnRpY2xlXCIsIFwiaDFcIiwgXCJQcm9maWxlIHdhbnQgdG8gYmUgc2Vlbj8gIE5vdCB5ZXQhXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGxvYWRTdGF0cygpIHtcclxuICAgICAgICB3YW5kLnF1ZXJBcG5kcihcImFydGljbGVcIiwgXCJoMVwiLCBcIlN0YXRzIHdhbnQgdG8gYmUgc2Vlbj8gIE5vdCB5ZXQhXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGxvYWRDaGVja2VkKGlucHV0LCBzZWFyY2hRdWVyKSB7XHJcbiAgICAgICAgZGF0YWJhc2UucmVmKHNlYXJjaFF1ZXIpLm9uY2UoXCJ2YWx1ZVwiLCBmdW5jdGlvbiAoc25hcCkge1xyXG4gICAgICAgICAgICB2YXIgcGVyc29uYWxEYXRhID0gc25hcC52YWwoKTtcclxuICAgICAgICAgICAgaWYgKHBlcnNvbmFsRGF0YS5DaGVja2VkID09PSBcIkZhbHNlXCIpIHtcclxuICAgICAgICAgICAgICAgIGlucHV0LmNoZWNrZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChwZXJzb25hbERhdGEuQ2hlY2tlZCA9PT0gXCJUcnVlXCIpIHtcclxuICAgICAgICAgICAgICAgIGlucHV0LmNoZWNrZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuXHJcbiAgICAgICAgaW5wdXQub25jbGljayA9IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIGlmIChpbnB1dC5jaGVja2VkID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgZGF0YWJhc2UucmVmKHNlYXJjaFF1ZXIpLnVwZGF0ZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJDaGVja2VkXCI6IFwiRmFsc2VcIixcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaW5wdXQuY2hlY2tlZCA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coaW5wdXQsIHNlYXJjaFF1ZXIpO1xyXG4gICAgICAgICAgICAgICAgZGF0YWJhc2UucmVmKHNlYXJjaFF1ZXIpLnVwZGF0ZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJDaGVja2VkXCI6IFwiVHJ1ZVwiLFxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gbG9hZENvbnRlbnRUb2RvKGNwLCBjbikge1xyXG4gICAgICAgIHZhciB0b2RvQ29udGFpbiA9IHdhbmQuY3J0RWxtKFwiZGl2XCIpO1xyXG4gICAgICAgIHRvZG9Db250YWluLmlkID0gXCJ0b2RvQ29udGFpblwiO1xyXG5cclxuICAgICAgICBmb3IgKHZhciBpIGluIGNwKSB7XHJcblxyXG4gICAgICAgICAgICB2YXIgaDMgPSB3YW5kLmNydEVsbShcImgzXCIsIGkpLFxyXG4gICAgICAgICAgICAgICAgdG9kbyA9IHdhbmQuY3J0RWxtKFwiZGl2XCIpLFxyXG4gICAgICAgICAgICAgICAgZGl2c3ViID0gd2FuZC5jcnRFbG0oXCJkaXZcIik7XHJcblxyXG4gICAgICAgICAgICB0b2RvLmlkID0gXCJ0b2RvXCI7XHJcbiAgICAgICAgICAgIGRpdnN1Yi5pZCA9IFwiZGV0YWlsc1wiO1xyXG4gICAgICAgICAgICBkaXZzdWIuc2V0QXR0cmlidXRlKFwiZGlzcGxheVwiLCBcImZhbHNlXCIpO1xyXG5cclxuICAgICAgICAgICAgaWYgKGRpdnN1Yi5nZXRBdHRyaWJ1dGUoXCJkaXNwbGF5XCIpID09PSBcImZhbHNlXCIpIHtcclxuICAgICAgICAgICAgICAgIGRpdnN1Yi5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGZvciAodmFyIGogaW4gY3BbaV0pIHtcclxuICAgICAgICAgICAgICAgIHZhciBzdWJwID0gd2FuZC5jcnRFbG0oXCJsYWJlbFwiLCBgJHtqfSB8IGApLFxyXG4gICAgICAgICAgICAgICAgICAgIGlucHV0ID0gd2FuZC5jcnRFbG0oXCJpbnB1dFwiKSxcclxuICAgICAgICAgICAgICAgICAgICBudW1MaW5rcyA9IHdhbmQudHh0KGAgJHtjcFtpXVtqXVsnTGlua3MgQnJva2VuJ119IGJyb2tlbiBMaW5rcyB8IGApLFxyXG4gICAgICAgICAgICAgICAgICAgIHNlYXJjaFF1ZXIgPSBgTWFyaydzIFRvb2wvJHtjbn0vQ29udGVudCBQYWdlcy8ke2l9LyR7an1gO1xyXG5cclxuICAgICAgICAgICAgICAgIGlucHV0LnR5cGUgPSBcImNoZWNrYm94XCI7XHJcblxyXG4gICAgICAgICAgICAgICAgbG9hZENoZWNrZWQoaW5wdXQsIHNlYXJjaFF1ZXIpO1xyXG5cclxuICAgICAgICAgICAgICAgIHdhbmQuYXBuZHIoc3VicCwgbnVtTGlua3MpO1xyXG4gICAgICAgICAgICAgICAgd2FuZC5hcG5kcihzdWJwLCBpbnB1dCk7XHJcbiAgICAgICAgICAgICAgICB3YW5kLmFwbmRyKGRpdnN1Yiwgc3VicCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHdhbmQuYXBuZHIodG9kbywgaDMpO1xyXG4gICAgICAgICAgICB3YW5kLmFwbmRyKHRvZG9Db250YWluLCB0b2RvKTtcclxuICAgICAgICAgICAgd2FuZC5hcG5kcih0b2RvQ29udGFpbiwgZGl2c3ViKTtcclxuICAgICAgICAgICAgd2FuZC5xdWVyQXBuZHIoXCJhcnRpY2xlXCIsIHRvZG9Db250YWluKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gcXVpekxvYWQocSkge1xyXG4gICAgICAgIGlmIChxID09PSBcIlRoZXJlIGlzIG5vdGhpbmcgaGVyZSFcIikge1xyXG4gICAgICAgICAgICB3YW5kLnF1ZXJBcG5kcihcImFydGljbGVcIiwgXCJwXCIsIGBRdWl6emVzIGFyZSBva2F5ISAke3F9YClcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIkxvYWQgYSBxdWl6IHRhYmxlIGZvciB0aGUgY29udmVyc2lvbiFcIilcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZGlzTGluayhsKSB7XHJcbiAgICAgICAgdmFyIGxpbmsgPSB3YW5kLmNydEVsbShcImFcIiwgXCJJTDMgTGlua1wiKSxcclxuICAgICAgICAgICAgcGFyYSA9IHdhbmQuY3J0RWxtKFwicFwiKTtcclxuICAgICAgICBsaW5rLmhyZWYgPSBsO1xyXG4gICAgICAgIHdhbmQuYXBuZHIocGFyYSwgbGluayk7XHJcblxyXG4gICAgICAgIHdhbmQucXVlckFwbmRyKFwiYXJ0aWNsZVwiLCBwYXJhKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBkaXNwbGF5RGV0YWlscyhjZCwgY24pIHtcclxuICAgICAgICBkaXNMaW5rKGNkLkxpbmspO1xyXG4gICAgICAgIHF1aXpMb2FkKGNkLlF1aXp6ZXMpO1xyXG4gICAgICAgIGxvYWRDb250ZW50VG9kbyhjZFtcIkNvbnRlbnQgUGFnZXNcIl0sIGNuKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBsb2FkQ291cnNlRGV0YWlscyhlKSB7XHJcbiAgICAgICAgdmFyIGNvdXJzZU51bSA9IGUudGFyZ2V0LmlubmVyVGV4dC5zcGxpdChcIlByb2plY3QgTnVtYmVyIFwiKVsxXSxcclxuICAgICAgICAgICAgY291cnNlRGV0YWlscztcclxuXHJcbiAgICAgICAgZGF0YWJhc2UucmVmKGBNYXJrJ3MgVG9vbC8ke2NvdXJzZU51bX1gKS5vbmNlKFwidmFsdWVcIiwgZnVuY3Rpb24gKHNuYXApIHtcclxuICAgICAgICAgICAgY291cnNlRGV0YWlscyA9IHNuYXAudmFsKCk7XHJcbiAgICAgICAgICAgIGRpc3BsYXlEZXRhaWxzKGNvdXJzZURldGFpbHMsIGNvdXJzZU51bSk7XHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBjbGVhckFydGljbGUoKSB7XHJcbiAgICAgICAgYXJ0aWNsZS5pbm5lckhUTUwgPSBcIlwiO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGRyb3Bkb3duKGRpc0Jvb2wsIG5leHRTaWIpIHtcclxuICAgICAgICBpZiAoZGlzQm9vbCA9PT0gXCJmYWxzZVwiKSB7XHJcbiAgICAgICAgICAgIG5leHRTaWIuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcclxuICAgICAgICAgICAgbmV4dFNpYi5zZXRBdHRyaWJ1dGUoXCJkaXNwbGF5XCIsIFwidHJ1ZVwiKTtcclxuICAgICAgICB9IGVsc2UgaWYgKGRpc0Jvb2wgPT09IFwidHJ1ZVwiKSB7XHJcbiAgICAgICAgICAgIG5leHRTaWIuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xyXG4gICAgICAgICAgICBuZXh0U2liLnNldEF0dHJpYnV0ZShcImRpc3BsYXlcIiwgXCJmYWxzZVwiKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZG9jdW1lbnQub25jbGljayA9IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgdmFyIHByb2plY3QgPSBlLnRhcmdldC5pbm5lclRleHQuaW5kZXhPZihcIlByb2plY3RcIikgPiAtMSxcclxuICAgICAgICAgICAgaDJsb2NhbCA9IGUudGFyZ2V0LmxvY2FsTmFtZSA9PT0gXCJoMlwiLFxyXG4gICAgICAgICAgICBidXR0b25sb2NhbCA9IGUudGFyZ2V0LmxvY2FsTmFtZSA9PT0gXCJidXR0b25cIixcclxuICAgICAgICAgICAgaG9tZSA9IGUudGFyZ2V0LmlubmVyVGV4dC5pbmRleE9mKFwiSG9tZVwiKSA+IC0xLFxyXG4gICAgICAgICAgICBwcm9maWxlID0gZS50YXJnZXQuaW5uZXJUZXh0LmluZGV4T2YoXCJQcm9maWxlXCIpID4gLTEsXHJcbiAgICAgICAgICAgIHN0YXRzID0gZS50YXJnZXQuaW5uZXJUZXh0LmluZGV4T2YoXCJTdGF0c1wiKSA+IC0xLFxyXG4gICAgICAgICAgICBoM2xvY2FsID0gZS50YXJnZXQubG9jYWxOYW1lLFxyXG4gICAgICAgICAgICBsZXNzb25OdW0gPSBlLnRhcmdldC5pbm5lclRleHQuaW5kZXhPZihcIkxlc3NvblwiKSA+IC0xLFxyXG4gICAgICAgICAgICBjaGVja2VkID0gZS50YXJnZXQudHlwZSA9PT0gXCJjaGVja2JveFwiO1xyXG5cclxuICAgICAgICBpZiAocHJvamVjdCAmJiBoMmxvY2FsKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiUHJvamVjdCBDbGlja2VkIVwiKTtcclxuICAgICAgICAgICAgY2xlYXJBcnRpY2xlKCk7XHJcbiAgICAgICAgICAgIGxvYWRDb3Vyc2VEZXRhaWxzKGUpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoaG9tZSAmJiBidXR0b25sb2NhbCkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIkhvbWUgQ2xpY2tlZCFcIik7XHJcbiAgICAgICAgICAgIGNsZWFyQXJ0aWNsZSgpO1xyXG4gICAgICAgICAgICB3aW5kb3cuc3RhcnRDb3Vyc2VMb2FkKCk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChwcm9maWxlICYmIGJ1dHRvbmxvY2FsKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiUHJvZmlsZSBjbGlja2VkIVwiKTtcclxuICAgICAgICAgICAgY2xlYXJBcnRpY2xlKCk7XHJcbiAgICAgICAgICAgIGxvYWRQcm9maWxlKCk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChzdGF0cyAmJiBidXR0b25sb2NhbCkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIlN0YXRzIGNsaWNrZWQhXCIpO1xyXG4gICAgICAgICAgICBjbGVhckFydGljbGUoKTtcclxuICAgICAgICAgICAgbG9hZFN0YXRzKCk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChoM2xvY2FsICYmIGxlc3Nvbk51bSkge1xyXG4gICAgICAgICAgICB2YXIgbmV4dFNpYiA9IGUudGFyZ2V0LnBhcmVudEVsZW1lbnQubmV4dEVsZW1lbnRTaWJsaW5nLFxyXG4gICAgICAgICAgICAgICAgZGlzQm9vbCA9IG5leHRTaWIuZ2V0QXR0cmlidXRlKFwiZGlzcGxheVwiKTtcclxuICAgICAgICAgICAgZHJvcGRvd24oZGlzQm9vbCwgbmV4dFNpYik7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbn0oKSk7XHJcbiIsIihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgdmFyIG5hdmlnID0ge1xyXG4gICAgICAgIGhvbWU6IFwiSG9tZVwiLFxyXG4gICAgICAgIHByb2ZpbGU6IFwiTXkgUHJvZmlsZVwiLFxyXG4gICAgICAgIHN0YXRzOiBcIlN0YXRzXCJcclxuICAgIH1cclxuXHJcbiAgICBmb3IgKHZhciBpIGluIG5hdmlnKSB7XHJcbiAgICAgICAgd2FuZC5xdWVyQXBuZHIoXCJuYXZcIiwgXCJidXR0b25cIiwgbmF2aWdbaV0pO1xyXG4gICAgfVxyXG5cclxufSgpKTtcclxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
