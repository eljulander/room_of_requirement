"use strict";var config={apiKey:"AIzaSyCRfRp20kEkpwO1Bs30sDyBkC4Qf-rsuNM",authDomain:"course-file-auditor.firebaseapp.com",databaseURL:"https://course-file-auditor.firebaseio.com",storageBucket:"course-file-auditor.appspot.com"};firebase.initializeApp(config);var database=firebase.database(),provider=new firebase.auth.GoogleAuthProvider;
"use strict";function toggleSignIn(){if(firebase.auth().currentUser)firebase.auth().signOut();else{var e=new firebase.auth.GoogleAuthProvider;e.addScope("https://www.googleapis.com/auth/plus.login"),e.addScope("profile"),e.addScope("email"),firebase.auth().signInWithRedirect(e)}document.getElementById("quickstart-sign-in").disabled=!0}function initApp(){firebase.auth().getRedirectResult().then(function(e){if(e.credential){var i=e.credential.accessToken;console.log(i)}else console.log("token null");e.user})["catch"](function(e){var i=e.code;e.message,e.email,e.credential;"auth/account-exists-with-different-credential"===i?alert("You have already signed up with a different auth provider for that email."):console.error(e)}),firebase.auth().onAuthStateChanged(function(e){e?(displayName=e.displayName,email=e.email,emailVerified=e.emailVerified,photoURL=e.photoURL,isAnonymous=e.isAnonymous,uid=e.uid,refreshToken=e.refreshToken,providerData=e.providerData,document.getElementById("quickstart-sign-in").textContent="Sign out",database.ref("users/"+uid).update({displayName:displayName,email:email,emailVerified:emailVerified,photoURL:photoURL,isAnonymous:isAnonymous,uid:uid,refreshToken:refreshToken,providerData:providerData})):document.getElementById("quickstart-sign-in").textContent="Sign in with Google",document.getElementById("quickstart-sign-in").disabled=!1}),document.getElementById("quickstart-sign-in").addEventListener("click",toggleSignIn,!1)}var displayName,email,emailVerified,photoURL,isAnonymous,uid,refreshToken,providerData;
"use strict";var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol?"symbol":typeof t};!function(t,e){t.wand=e()}("undefined"!=typeof window?window:void 0,function(){var t={apndr:function(t,e){if("object"!==("undefined"==typeof t?"undefined":_typeof(t))||"object"!==("undefined"==typeof e?"undefined":_typeof(e))||Array.isArray(e))if("object"!==("undefined"==typeof t?"undefined":_typeof(t)))console.error("First parameter passed is not an object element.");else if("object"!==("undefined"==typeof e?"undefined":_typeof(e)))"string"!=typeof e&&"number"!=typeof e||t.appendChild(this.txt(e));else if(Array.isArray(e))for(var r=e,n=0;n<r.length;n++)this.apndr(t,r[n]);else console.error("Parameters are not compatible in the lib.apndr function.  Hit the arrow on the left for call stack.");else t.appendChild(e)},querApndr:function(t,e,r){var n=document.querySelector(t);if(null!=n){if(Array.isArray(e))for(var o=e,i=0;i<o.length;i++)this.apndr(n,this.crtElm(o[i]));else r?this.apndr(n,this.crtElm(e,r)):this.apndr(n,e);return n}console.error("No tag exists in the DOM. Hit the arrow on the left for call stack.")},querAttr:function(t,e,r){var n=document.querySelector(t);null==n?console.error("No tag exists in the DOM. Hit the arrow on the left for call stack."):e&&n.setAttribute(e,r)},txt:function(t){return"string"==typeof t?document.createTextNode(t):"number"==typeof t?document.createTextNode(t.toString()):void console.error("Parameter passed to lib.txt is not a string nor a number.  Hit the arrow on the left for call stack.")},crtElm:function(t,e){var r,n=document.createElement(t);return e&&("string"==typeof e?(r=this.txt(e),this.apndr(n,r)):console.error("Must pass a string as the second param in lib.crtElm function.  Hit the arrow on the left for call stack.")),n}};return t});
"use strict";!function(n){function a(n,a){var o=wand.crtElm("section"),t=wand.crtElm("h2","Project Number "+n);t.className="courseTitle",wand.apndr(o,t),wand.querApndr("main article",o)}var o,t;n.startCourseLoad=function(){database.ref("Mark's Tool").once("value",function(n){n.forEach(function(n){t=n.val(),o=n.key,a(o,t)})})},n.onload=function(){n.startCourseLoad(),initApp()}}(window);
"use strict";!function(){function e(){wand.querApndr("article","h1","Profile want to be seen?  Not yet!")}function t(){wand.querApndr("article","h1","Stats want to be seen?  Not yet!")}function n(e,t){database.ref(t).once("value",function(t){var n=t.val();"False"===n.Checked?e.checked=!1:"True"===n.Checked&&(e.checked=!0)}),e.onclick=function(n){e.checked===!1?(console.log(!1),database.ref(t).update({Checked:"False"})):e.checked===!0&&(console.log(e,t),database.ref(t).update({Checked:"True"}))}}function a(e,t){var a=wand.crtElm("div");a.id="todoContain";for(var r in e){var o=wand.crtElm("h3",r),i=wand.crtElm("div"),l=wand.crtElm("div");i.id="todo",l.id="details",l.setAttribute("display","false"),"false"===l.getAttribute("display")&&(l.style.display="none");for(var d in e[r]){var c=wand.crtElm("label",d+" | "),s=wand.crtElm("input"),u=wand.txt(" "+e[r][d]["Links Broken"]+" broken Links | "),f="Mark's Tool/"+t+"/Content Pages/"+r+"/"+d;s.type="checkbox",n(s,f),wand.apndr(c,u),wand.apndr(c,s),wand.apndr(l,c)}wand.apndr(i,o),wand.apndr(a,i),wand.apndr(a,l),wand.querApndr("article",a)}}function r(e){"There is nothing here!"===e?wand.querApndr("article","p","Quizzes are okay! "+e):console.log("Load a quiz table for the conversion!")}function o(e){var t=wand.crtElm("a","IL3 Link"),n=wand.crtElm("p");t.href=e,wand.apndr(n,t),wand.querApndr("article",n)}function i(e,t){o(e.Link),r(e.Quizzes),a(e["Content Pages"],t)}function l(e){var t,n=e.target.innerText.split("Project Number ")[1];database.ref("Mark's Tool/"+n).once("value",function(e){t=e.val(),i(t,n)})}function d(){s.innerHTML=""}function c(e,t){"false"===e?(t.style.display="block",t.setAttribute("display","true")):"true"===e&&(t.style.display="none",t.setAttribute("display","false"))}var s=wand.querApndr("article");document.onclick=function(n){var a=n.target.innerText.indexOf("Project")>-1,r="h2"===n.target.localName,o="button"===n.target.localName,i=n.target.innerText.indexOf("Home")>-1,s=n.target.innerText.indexOf("Profile")>-1,u=n.target.innerText.indexOf("Stats")>-1,f=n.target.localName,p=n.target.innerText.indexOf("Lesson")>-1||n.target.innerText.indexOf("Module")>-1||n.target.innerText.indexOf("Welcome")>-1;"checkbox"===n.target.type;if(console.log(f,p),a&&r)console.log("Project Clicked!"),d(),l(n);else if(i&&o)console.log("Home Clicked!"),d(),window.startCourseLoad();else if(s&&o)console.log("Profile clicked!"),d(),e();else if(u&&o)console.log("Stats clicked!"),d(),t();else{if(!f||!p)return;var g=n.target.parentElement.nextElementSibling,k=g.getAttribute("display");c(k,g)}}}();
"use strict";!function(){var t={home:"Home",profile:"My Profile",stats:"Stats"};for(var r in t)wand.querApndr("nav","button",t[r])}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbmZpZy5qcyIsImxvZ2luLmpzIiwid2FuZC5qcyIsIm1haW4uanMiLCJjbGlja2hhbmRsZXIuanMiLCJuYXYuanMiXSwibmFtZXMiOlsiY29uZmlnIiwiYXBpS2V5IiwiYXV0aERvbWFpbiIsImRhdGFiYXNlVVJMIiwic3RvcmFnZUJ1Y2tldCIsImZpcmViYXNlIiwiaW5pdGlhbGl6ZUFwcCIsImRhdGFiYXNlIiwicHJvdmlkZXIiLCJhdXRoIiwiR29vZ2xlQXV0aFByb3ZpZGVyIiwidG9nZ2xlU2lnbkluIiwiY3VycmVudFVzZXIiLCJzaWduT3V0IiwiYWRkU2NvcGUiLCJzaWduSW5XaXRoUmVkaXJlY3QiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwiZGlzYWJsZWQiLCJpbml0QXBwIiwiZ2V0UmVkaXJlY3RSZXN1bHQiLCJ0aGVuIiwicmVzdWx0IiwiY3JlZGVudGlhbCIsInRva2VuIiwiYWNjZXNzVG9rZW4iLCJjb25zb2xlIiwibG9nIiwidXNlciIsImVycm9yIiwiZXJyb3JDb2RlIiwiY29kZSIsIm1lc3NhZ2UiLCJlbWFpbCIsImFsZXJ0Iiwib25BdXRoU3RhdGVDaGFuZ2VkIiwiZGlzcGxheU5hbWUiLCJlbWFpbFZlcmlmaWVkIiwicGhvdG9VUkwiLCJpc0Fub255bW91cyIsInVpZCIsInJlZnJlc2hUb2tlbiIsInByb3ZpZGVyRGF0YSIsInRleHRDb250ZW50IiwicmVmIiwidXBkYXRlIiwiYWRkRXZlbnRMaXN0ZW5lciIsIl90eXBlb2YiLCJTeW1ib2wiLCJpdGVyYXRvciIsIm9iaiIsImNvbnN0cnVjdG9yIiwiZ2xvIiwibGliIiwid2FuZCIsIndpbmRvdyIsInVuZGVmaW5lZCIsImFwbmRyIiwiYSIsImIiLCJBcnJheSIsImlzQXJyYXkiLCJhcHBlbmRDaGlsZCIsInRoaXMiLCJ0eHQiLCJhcnIiLCJpIiwibGVuZ3RoIiwicXVlckFwbmRyIiwiYyIsImVsZSIsInF1ZXJ5U2VsZWN0b3IiLCJjcnRFbG0iLCJxdWVyQXR0ciIsInNldEF0dHJpYnV0ZSIsImNyZWF0ZVRleHROb2RlIiwidG9TdHJpbmciLCJjcmVhdGVFbGVtZW50IiwiZ2VuZXJhdGVDb3Vyc2VQcmV2aWV3IiwiaWQiLCJkZXRhaWxzIiwic2VjdGlvbiIsImhlYWRlciIsImNsYXNzTmFtZSIsImNvdXJzZV9pZCIsImNvdXJzZV9kZXRhaWxzIiwic3RhcnRDb3Vyc2VMb2FkIiwib25jZSIsInNuYXAiLCJmb3JFYWNoIiwiY3NuYXAiLCJ2YWwiLCJrZXkiLCJvbmxvYWQiLCJsb2FkUHJvZmlsZSIsImxvYWRTdGF0cyIsImxvYWRDaGVja2VkIiwiaW5wdXQiLCJzZWFyY2hRdWVyIiwicGVyc29uYWxEYXRhIiwiQ2hlY2tlZCIsImNoZWNrZWQiLCJvbmNsaWNrIiwiZSIsImxvYWRDb250ZW50VG9kbyIsImNwIiwiY24iLCJ0b2RvQ29udGFpbiIsImgzIiwidG9kbyIsImRpdnN1YiIsImdldEF0dHJpYnV0ZSIsInN0eWxlIiwiZGlzcGxheSIsImoiLCJzdWJwIiwibnVtTGlua3MiLCJ0eXBlIiwicXVpekxvYWQiLCJxIiwiZGlzTGluayIsImwiLCJsaW5rIiwicGFyYSIsImhyZWYiLCJkaXNwbGF5RGV0YWlscyIsImNkIiwiTGluayIsIlF1aXp6ZXMiLCJsb2FkQ291cnNlRGV0YWlscyIsImNvdXJzZURldGFpbHMiLCJjb3Vyc2VOdW0iLCJ0YXJnZXQiLCJpbm5lclRleHQiLCJzcGxpdCIsImNsZWFyQXJ0aWNsZSIsImFydGljbGUiLCJpbm5lckhUTUwiLCJkcm9wZG93biIsImRpc0Jvb2wiLCJuZXh0U2liIiwicHJvamVjdCIsImluZGV4T2YiLCJoMmxvY2FsIiwibG9jYWxOYW1lIiwiYnV0dG9ubG9jYWwiLCJob21lIiwicHJvZmlsZSIsInN0YXRzIiwiaDNsb2NhbCIsImxlc3Nvbk51bSIsInBhcmVudEVsZW1lbnQiLCJuZXh0RWxlbWVudFNpYmxpbmciLCJuYXZpZyJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBQSxJQUFJQSxTQUNBQyxPQUFRLDBDQUNSQyxXQUFZLHNDQUNaQyxZQUFhLDZDQUNiQyxjQUFlLGtDQUVuQkMsVUFBU0MsY0FBY04sT0FFdkIsSUFBSU8sVUFBV0YsU0FBU0UsV0FDcEJDLFNBQVcsR0FBSUgsVUFBU0ksS0FBS0M7QUNUakMsWUFBSSxTQUFTQyxnQkFDTCxHQUFLTixTQUFTSSxPQUFPRyxZQVNqQlAsU0FBU0ksT0FBT0ksY0FUYyxDQUM5QixHQUFJTCxHQUFXLEdBQUlILFVBQVNJLEtBQUtDLGtCQUVqQ0YsR0FBU00sU0FBUyw4Q0FDbEJOLEVBQVNNLFNBQVMsV0FDbEJOLEVBQVNNLFNBQVMsU0FDbEJULFNBQVNJLE9BQU9NLG1CQUFtQlAsR0FLdkNRLFNBQVNDLGVBQWUsc0JBQXNCQyxVQUFXLEVBWTdELFFBQVNDLFdBQ0xkLFNBQVNJLE9BQU9XLG9CQUFvQkMsS0FBSyxTQUFVQyxHQUMvQyxHQUFJQSxFQUFPQyxXQUFZLENBRW5CLEdBQUlDLEdBQVFGLEVBQU9DLFdBQVdFLFdBRTlCQyxTQUFRQyxJQUFJSCxPQUVaRSxTQUFRQyxJQUFJLGFBRUxMLEdBQU9NLE9BVHRCdkIsU0FVUyxTQUFVd0IsR0FDZixHQUFJQyxHQUFZRCxFQUFNRSxJQUNIRixHQUFNRyxRQUNiSCxFQUFNSSxNQUNESixFQUFNTixVQUNMLG1EQUFkTyxFQUNBSSxNQUFNLDZFQUVOUixRQUFRRyxNQUFNQSxLQUd0QnhCLFNBQVNJLE9BQU8wQixtQkFBbUIsU0FBVVAsR0FDckNBLEdBQ0FRLFlBQWNSLEVBQUtRLFlBQ25CSCxNQUFRTCxFQUFLSyxNQUNiSSxjQUFnQlQsRUFBS1MsY0FDckJDLFNBQVdWLEVBQUtVLFNBQ2hCQyxZQUFjWCxFQUFLVyxZQUNuQkMsSUFBTVosRUFBS1ksSUFDWEMsYUFBZWIsRUFBS2EsYUFDcEJDLGFBQWVkLEVBQUtjLGFBRXBCMUIsU0FBU0MsZUFBZSxzQkFBc0IwQixZQUFjLFdBQzVEcEMsU0FBU3FDLElBQVQsU0FBc0JKLEtBQU9LLFFBQ3pCVCxZQUFhQSxZQUNiSCxNQUFPQSxNQUNQSSxjQUFlQSxjQUNmQyxTQUFVQSxTQUNWQyxZQUFhQSxZQUNiQyxJQUFLQSxJQUNMQyxhQUFjQSxhQUNkQyxhQUFjQSxnQkFHbEIxQixTQUFTQyxlQUFlLHNCQUFzQjBCLFlBQWMsc0JBRWhFM0IsU0FBU0MsZUFBZSxzQkFBc0JDLFVBQVcsSUFFN0RGLFNBQVNDLGVBQWUsc0JBQXNCNkIsaUJBQWlCLFFBQVNuQyxjQUFjLEdBMUQxRixHQUFJeUIsYUFDQUgsTUFDQUksY0FDQUMsU0FDQUMsWUFDQUMsSUFDQUMsYUFDQUM7QUN0QlIsWUFFQSxJQUFJSyxTQUE0QixrQkFBWEMsU0FBb0QsZ0JBQXBCQSxRQUFPQyxTQUF3QixTQUFVQyxHQUFPLGFBQWNBLElBQVMsU0FBVUEsR0FBTyxNQUFPQSxJQUF5QixrQkFBWEYsU0FBeUJFLEVBQUlDLGNBQWdCSCxPQUFTLGVBQWtCRSxLQUZ6TyxTQUFVRSxFQUFLQyxHQUNaRCxFQUFJRSxLQUFPRCxLQUNLLG1CQUFYRSxRQUF5QkEsT0FBaENDLE9BQStDLFdBQzdDLEdBQUlILElBQ0FJLE1BQU8sU0FBVUMsRUFBR0MsR0FDaEIsR0FBaUIsWUFBYixtQkFBT0QsR0FBUCxZQUFBWCxRQUFPVyxLQUErQixZQUFiLG1CQUFPQyxHQUFQLFlBQUFaLFFBQU9ZLEtBQW1CQyxNQUFNQyxRQUFRRixHQUU5RCxHQUFpQixZQUFiLG1CQUFPRCxHQUFQLFlBQUFYLFFBQU9XLElBQ2RoQyxRQUFRRyxNQUFNLHdEQUNYLElBQWlCLFlBQWIsbUJBQU84QixHQUFQLFlBQUFaLFFBQU9ZLElBQ0csZ0JBQU5BLElBQStCLGdCQUFOQSxJQUNoQ0QsRUFBRUksWUFBWUMsS0FBS0MsSUFBSUwsUUFFeEIsSUFBSUMsTUFBTUMsUUFBUUYsR0FFckIsSUFBSyxHQURETSxHQUFNTixFQUNETyxFQUFJLEVBQUdBLEVBQUlELEVBQUlFLE9BQVFELElBQzVCSCxLQUFLTixNQUFNQyxFQUFHTyxFQUFJQyxRQUd0QnhDLFNBQVFHLE1BQU0sMkdBYmQ2QixHQUFFSSxZQUFZSCxJQWdCdEJTLFVBQVcsU0FBVVYsRUFBR0MsRUFBR1UsR0FDdkIsR0FBSUMsR0FBTXRELFNBQVN1RCxjQUFjYixFQUNqQyxJQUFXLE1BQVBZLEVBRUcsQ0FDSCxHQUFJVixNQUFNQyxRQUFRRixHQUVkLElBQUssR0FERE0sR0FBTU4sRUFDRE8sRUFBSSxFQUFHQSxFQUFJRCxFQUFJRSxPQUFRRCxJQUM1QkgsS0FBS04sTUFBTWEsRUFBS1AsS0FBS1MsT0FBT1AsRUFBSUMsU0FFN0JHLEdBQ1BOLEtBQUtOLE1BQU1hLEVBQUtQLEtBQUtTLE9BQU9iLEVBQUdVLElBRS9CTixLQUFLTixNQUFNYSxFQUFLWCxFQUVwQixPQUFPVyxHQVpQNUMsUUFBUUcsTUFBTSx3RUFldEI0QyxTQUFVLFNBQVVmLEVBQUdDLEVBQUdVLEdBQ3RCLEdBQUlDLEdBQU10RCxTQUFTdUQsY0FBY2IsRUFDdEIsT0FBUFksRUFDQTVDLFFBQVFHLE1BQU0sdUVBRVY4QixHQUNBVyxFQUFJSSxhQUFhZixFQUFHVSxJQUloQ0wsSUFBSyxTQUFVTixHQUNYLE1BQWlCLGdCQUFOQSxHQUNBMUMsU0FBUzJELGVBQWVqQixHQUNYLGdCQUFOQSxHQUNQMUMsU0FBUzJELGVBQWVqQixFQUFFa0IsZ0JBRWpDbEQsU0FBUUcsTUFBTSx5R0FHdEIyQyxPQUFRLFNBQVVkLEVBQUdDLEdBQ2pCLEdBQ0lLLEdBREFNLEVBQU10RCxTQUFTNkQsY0FBY25CLEVBVWpDLE9BUklDLEtBQ2lCLGdCQUFOQSxJQUNQSyxFQUFNRCxLQUFLQyxJQUFJTCxHQUNmSSxLQUFLTixNQUFNYSxFQUFLTixJQUVoQnRDLFFBQVFHLE1BQU0sOEdBR2Z5QyxHQUdmLE9BQU9qQjtBQ3pFWCxjQUFDLFNBQVVFLEdBTVAsUUFBU3VCLEdBQXNCQyxFQUFJQyxHQUMvQixHQUFJQyxHQUFVM0IsS0FBS2tCLE9BQU8sV0FDdEJVLEVBQVM1QixLQUFLa0IsT0FBTyxLQUFaLGtCQUFvQ08sRUFDakRHLEdBQU9DLFVBQVksY0FDbkI3QixLQUFLRyxNQUFNd0IsRUFBU0MsR0FFcEI1QixLQUFLYyxVQUFVLGVBQWdCYSxHQVRuQyxHQUFJRyxHQUNBQyxDQVdKOUIsR0FBTytCLGdCQUFrQixXQUNyQi9FLFNBQVNxQyxJQUFJLGVBQWUyQyxLQUFLLFFBQVMsU0FBVUMsR0FDaERBLEVBQUtDLFFBQVEsU0FBVUMsR0FDbkJMLEVBQWlCSyxFQUFNQyxNQUN2QlAsRUFBWU0sRUFBTUUsSUFDbEJkLEVBQXNCTSxFQUFXQyxRQUs3QzlCLEVBQU9zQyxPQUFTLFdBQ1p0QyxFQUFPK0Isa0JBQ1BuRSxZQUVOb0M7QUM3QkYsY0FBQyxXQUlHLFFBQVN1QyxLQUNMeEMsS0FBS2MsVUFBVSxVQUFXLEtBQU0sc0NBR3BDLFFBQVMyQixLQUNMekMsS0FBS2MsVUFBVSxVQUFXLEtBQU0sb0NBR3BDLFFBQVM0QixHQUFZQyxFQUFPQyxHQUN4QjNGLFNBQVNxQyxJQUFJc0QsR0FBWVgsS0FBSyxRQUFTLFNBQVVDLEdBQzdDLEdBQUlXLEdBQWVYLEVBQUtHLEtBQ0ssV0FBekJRLEVBQWFDLFFBQ2JILEVBQU1JLFNBQVUsRUFDZ0IsU0FBekJGLEVBQWFDLFVBQ3BCSCxFQUFNSSxTQUFVLEtBSXhCSixFQUFNSyxRQUFVLFNBQVVDLEdBQ2xCTixFQUFNSSxXQUFZLEdBQ2xCM0UsUUFBUUMsS0FBSSxHQUNacEIsU0FBU3FDLElBQUlzRCxHQUFZckQsUUFDckJ1RCxRQUFXLFdBRVJILEVBQU1JLFdBQVksSUFDekIzRSxRQUFRQyxJQUFJc0UsRUFBT0MsR0FDbkIzRixTQUFTcUMsSUFBSXNELEdBQVlyRCxRQUNyQnVELFFBQVcsV0FNM0IsUUFBU0ksR0FBZ0JDLEVBQUlDLEdBQ3pCLEdBQUlDLEdBQWNyRCxLQUFLa0IsT0FBTyxNQUM5Qm1DLEdBQVk1QixHQUFLLGFBRWpCLEtBQUssR0FBSWIsS0FBS3VDLEdBQUksQ0FFZCxHQUFJRyxHQUFLdEQsS0FBS2tCLE9BQU8sS0FBTU4sR0FDdkIyQyxFQUFPdkQsS0FBS2tCLE9BQU8sT0FDbkJzQyxFQUFTeEQsS0FBS2tCLE9BQU8sTUFFekJxQyxHQUFLOUIsR0FBSyxPQUNWK0IsRUFBTy9CLEdBQUssVUFDWitCLEVBQU9wQyxhQUFhLFVBQVcsU0FFUSxVQUFuQ29DLEVBQU9DLGFBQWEsYUFDcEJELEVBQU9FLE1BQU1DLFFBQVUsT0FHM0IsS0FBSyxHQUFJQyxLQUFLVCxHQUFHdkMsR0FBSSxDQUNqQixHQUFJaUQsR0FBTzdELEtBQUtrQixPQUFPLFFBQVkwQyxFQUF4QixPQUNQakIsRUFBUTNDLEtBQUtrQixPQUFPLFNBQ3BCNEMsRUFBVzlELEtBQUtVLElBQUwsSUFBYXlDLEVBQUd2QyxHQUFHZ0QsR0FBRyxnQkFBdEIsb0JBQ1hoQixFQUFBLGVBQTRCUSxFQUE1QixrQkFBZ0R4QyxFQUFoRCxJQUFxRGdELENBRXpEakIsR0FBTW9CLEtBQU8sV0FFYnJCLEVBQVlDLEVBQU9DLEdBRW5CNUMsS0FBS0csTUFBTTBELEVBQU1DLEdBQ2pCOUQsS0FBS0csTUFBTTBELEVBQU1sQixHQUNqQjNDLEtBQUtHLE1BQU1xRCxFQUFRSyxHQUd2QjdELEtBQUtHLE1BQU1vRCxFQUFNRCxHQUNqQnRELEtBQUtHLE1BQU1rRCxFQUFhRSxHQUN4QnZELEtBQUtHLE1BQU1rRCxFQUFhRyxHQUN4QnhELEtBQUtjLFVBQVUsVUFBV3VDLElBSWxDLFFBQVNXLEdBQVNDLEdBQ0osMkJBQU5BLEVBQ0FqRSxLQUFLYyxVQUFVLFVBQVcsSUFBMUIscUJBQW9EbUQsR0FFcEQ3RixRQUFRQyxJQUFJLHlDQUlwQixRQUFTNkYsR0FBUUMsR0FDYixHQUFJQyxHQUFPcEUsS0FBS2tCLE9BQU8sSUFBSyxZQUN4Qm1ELEVBQU9yRSxLQUFLa0IsT0FBTyxJQUN2QmtELEdBQUtFLEtBQU9ILEVBQ1puRSxLQUFLRyxNQUFNa0UsRUFBTUQsR0FFakJwRSxLQUFLYyxVQUFVLFVBQVd1RCxHQUc5QixRQUFTRSxHQUFlQyxFQUFJcEIsR0FDeEJjLEVBQVFNLEVBQUdDLE1BQ1hULEVBQVNRLEVBQUdFLFNBQ1p4QixFQUFnQnNCLEVBQUcsaUJBQWtCcEIsR0FHekMsUUFBU3VCLEdBQWtCMUIsR0FDdkIsR0FDSTJCLEdBREFDLEVBQVk1QixFQUFFNkIsT0FBT0MsVUFBVUMsTUFBTSxtQkFBbUIsRUFHNUQvSCxVQUFTcUMsSUFBVCxlQUE0QnVGLEdBQWE1QyxLQUFLLFFBQVMsU0FBVUMsR0FDN0QwQyxFQUFnQjFDLEVBQUtHLE1BQ3JCa0MsRUFBZUssRUFBZUMsS0FJdEMsUUFBU0ksS0FDTEMsRUFBUUMsVUFBWSxHQUd4QixRQUFTQyxHQUFTQyxFQUFTQyxHQUNQLFVBQVpELEdBQ0FDLEVBQVE1QixNQUFNQyxRQUFVLFFBQ3hCMkIsRUFBUWxFLGFBQWEsVUFBVyxTQUNiLFNBQVppRSxJQUNQQyxFQUFRNUIsTUFBTUMsUUFBVSxPQUN4QjJCLEVBQVFsRSxhQUFhLFVBQVcsVUF0SHhDLEdBQUk4RCxHQUFVbEYsS0FBS2MsVUFBVSxVQTBIN0JwRCxVQUFTc0YsUUFBVSxTQUFVQyxHQUN6QixHQUFJc0MsR0FBVXRDLEVBQUU2QixPQUFPQyxVQUFVUyxRQUFRLFdBQWEsR0FDbERDLEVBQWlDLE9BQXZCeEMsRUFBRTZCLE9BQU9ZLFVBQ25CQyxFQUFxQyxXQUF2QjFDLEVBQUU2QixPQUFPWSxVQUN2QkUsRUFBTzNDLEVBQUU2QixPQUFPQyxVQUFVUyxRQUFRLFFBQVUsR0FDNUNLLEVBQVU1QyxFQUFFNkIsT0FBT0MsVUFBVVMsUUFBUSxXQUFhLEdBQ2xETSxFQUFRN0MsRUFBRTZCLE9BQU9DLFVBQVVTLFFBQVEsU0FBVyxHQUM5Q08sRUFBVTlDLEVBQUU2QixPQUFPWSxVQUNuQk0sRUFBWS9DLEVBQUU2QixPQUFPQyxVQUFVUyxRQUFRLFVBQVksSUFBTXZDLEVBQUU2QixPQUFPQyxVQUFVUyxRQUFRLFVBQVksSUFBTXZDLEVBQUU2QixPQUFPQyxVQUFVUyxRQUFRLFdBQWEsRUFDbEgsY0FBbEJ2QyxFQUFFNkIsT0FBT2YsSUFJdkIsSUFGSTNGLFFBQVFDLElBQUkwSCxFQUFTQyxHQUVyQlQsR0FBV0UsRUFDWHJILFFBQVFDLElBQUksb0JBQ1o0RyxJQUNBTixFQUFrQjFCLE9BQ2YsSUFBSTJDLEdBQVFELEVBQ2Z2SCxRQUFRQyxJQUFJLGlCQUNaNEcsSUFDQWhGLE9BQU8rQixzQkFDSixJQUFJNkQsR0FBV0YsRUFDbEJ2SCxRQUFRQyxJQUFJLG9CQUNaNEcsSUFDQXpDLFFBQ0csSUFBSXNELEdBQVNILEVBQ2hCdkgsUUFBUUMsSUFBSSxrQkFDWjRHLElBQ0F4QyxRQUNHLENBQUEsSUFBSXNELElBQVdDLEVBS2xCLE1BSkEsSUFBSVYsR0FBVXJDLEVBQUU2QixPQUFPbUIsY0FBY0MsbUJBQ2pDYixFQUFVQyxFQUFRN0IsYUFBYSxVQUNuQzJCLEdBQVNDLEVBQVNDO0FDNUo5QixjQUFDLFdBR0csR0FBSWEsSUFDQVAsS0FBTSxPQUNOQyxRQUFTLGFBQ1RDLE1BQU8sUUFHWCxLQUFLLEdBQUlsRixLQUFLdUYsR0FDVm5HLEtBQUtjLFVBQVUsTUFBTyxTQUFVcUYsRUFBTXZGIiwiZmlsZSI6InNjcmlwdHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgY29uZmlnID0ge1xyXG4gICAgYXBpS2V5OiBcIkFJemFTeUNSZlJwMjBrRWtwd08xQnMzMHNEeUJrQzRRZi1yc3VOTVwiLFxyXG4gICAgYXV0aERvbWFpbjogXCJjb3Vyc2UtZmlsZS1hdWRpdG9yLmZpcmViYXNlYXBwLmNvbVwiLFxyXG4gICAgZGF0YWJhc2VVUkw6IFwiaHR0cHM6Ly9jb3Vyc2UtZmlsZS1hdWRpdG9yLmZpcmViYXNlaW8uY29tXCIsXHJcbiAgICBzdG9yYWdlQnVja2V0OiBcImNvdXJzZS1maWxlLWF1ZGl0b3IuYXBwc3BvdC5jb21cIixcclxufTtcclxuZmlyZWJhc2UuaW5pdGlhbGl6ZUFwcChjb25maWcpO1xyXG5cclxudmFyIGRhdGFiYXNlID0gZmlyZWJhc2UuZGF0YWJhc2UoKTtcclxudmFyIHByb3ZpZGVyID0gbmV3IGZpcmViYXNlLmF1dGguR29vZ2xlQXV0aFByb3ZpZGVyKCk7XHJcbiIsIiAgICBmdW5jdGlvbiB0b2dnbGVTaWduSW4oKSB7XHJcbiAgICAgICAgaWYgKCFmaXJlYmFzZS5hdXRoKCkuY3VycmVudFVzZXIpIHtcclxuICAgICAgICAgICAgdmFyIHByb3ZpZGVyID0gbmV3IGZpcmViYXNlLmF1dGguR29vZ2xlQXV0aFByb3ZpZGVyKCk7XHJcblxyXG4gICAgICAgICAgICBwcm92aWRlci5hZGRTY29wZSgnaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vYXV0aC9wbHVzLmxvZ2luJyk7XHJcbiAgICAgICAgICAgIHByb3ZpZGVyLmFkZFNjb3BlKCdwcm9maWxlJyk7XHJcbiAgICAgICAgICAgIHByb3ZpZGVyLmFkZFNjb3BlKCdlbWFpbCcpO1xyXG4gICAgICAgICAgICBmaXJlYmFzZS5hdXRoKCkuc2lnbkluV2l0aFJlZGlyZWN0KHByb3ZpZGVyKTtcclxuXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgZmlyZWJhc2UuYXV0aCgpLnNpZ25PdXQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3F1aWNrc3RhcnQtc2lnbi1pbicpLmRpc2FibGVkID0gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgZGlzcGxheU5hbWUsXHJcbiAgICAgICAgZW1haWwsXHJcbiAgICAgICAgZW1haWxWZXJpZmllZCxcclxuICAgICAgICBwaG90b1VSTCxcclxuICAgICAgICBpc0Fub255bW91cyxcclxuICAgICAgICB1aWQsXHJcbiAgICAgICAgcmVmcmVzaFRva2VuLFxyXG4gICAgICAgIHByb3ZpZGVyRGF0YTtcclxuXHJcbiAgICBmdW5jdGlvbiBpbml0QXBwKCkge1xyXG4gICAgICAgIGZpcmViYXNlLmF1dGgoKS5nZXRSZWRpcmVjdFJlc3VsdCgpLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xyXG4gICAgICAgICAgICBpZiAocmVzdWx0LmNyZWRlbnRpYWwpIHtcclxuICAgICAgICAgICAgICAgIC8vIFRoaXMgZ2l2ZXMgeW91IGEgR29vZ2xlIEFjY2VzcyBUb2tlbi4gWW91IGNhbiB1c2UgaXQgdG8gYWNjZXNzIHRoZSBHb29nbGUgQVBJLlxyXG4gICAgICAgICAgICAgICAgdmFyIHRva2VuID0gcmVzdWx0LmNyZWRlbnRpYWwuYWNjZXNzVG9rZW47XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2codG9rZW4pO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3Rva2VuIG51bGwnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgdXNlciA9IHJlc3VsdC51c2VyO1xyXG4gICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikge1xyXG4gICAgICAgICAgICB2YXIgZXJyb3JDb2RlID0gZXJyb3IuY29kZTtcclxuICAgICAgICAgICAgdmFyIGVycm9yTWVzc2FnZSA9IGVycm9yLm1lc3NhZ2U7XHJcbiAgICAgICAgICAgIHZhciBlbWFpbCA9IGVycm9yLmVtYWlsO1xyXG4gICAgICAgICAgICB2YXIgY3JlZGVudGlhbCA9IGVycm9yLmNyZWRlbnRpYWw7XHJcbiAgICAgICAgICAgIGlmIChlcnJvckNvZGUgPT09ICdhdXRoL2FjY291bnQtZXhpc3RzLXdpdGgtZGlmZmVyZW50LWNyZWRlbnRpYWwnKSB7XHJcbiAgICAgICAgICAgICAgICBhbGVydCgnWW91IGhhdmUgYWxyZWFkeSBzaWduZWQgdXAgd2l0aCBhIGRpZmZlcmVudCBhdXRoIHByb3ZpZGVyIGZvciB0aGF0IGVtYWlsLicpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICBmaXJlYmFzZS5hdXRoKCkub25BdXRoU3RhdGVDaGFuZ2VkKGZ1bmN0aW9uICh1c2VyKSB7XHJcbiAgICAgICAgICAgIGlmICh1c2VyKSB7XHJcbiAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZSA9IHVzZXIuZGlzcGxheU5hbWU7XHJcbiAgICAgICAgICAgICAgICBlbWFpbCA9IHVzZXIuZW1haWw7XHJcbiAgICAgICAgICAgICAgICBlbWFpbFZlcmlmaWVkID0gdXNlci5lbWFpbFZlcmlmaWVkO1xyXG4gICAgICAgICAgICAgICAgcGhvdG9VUkwgPSB1c2VyLnBob3RvVVJMO1xyXG4gICAgICAgICAgICAgICAgaXNBbm9ueW1vdXMgPSB1c2VyLmlzQW5vbnltb3VzO1xyXG4gICAgICAgICAgICAgICAgdWlkID0gdXNlci51aWQ7XHJcbiAgICAgICAgICAgICAgICByZWZyZXNoVG9rZW4gPSB1c2VyLnJlZnJlc2hUb2tlbjtcclxuICAgICAgICAgICAgICAgIHByb3ZpZGVyRGF0YSA9IHVzZXIucHJvdmlkZXJEYXRhO1xyXG5cclxuICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdxdWlja3N0YXJ0LXNpZ24taW4nKS50ZXh0Q29udGVudCA9ICdTaWduIG91dCc7XHJcbiAgICAgICAgICAgICAgICBkYXRhYmFzZS5yZWYoYHVzZXJzLyR7dWlkfWApLnVwZGF0ZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWU6IGRpc3BsYXlOYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgIGVtYWlsOiBlbWFpbCxcclxuICAgICAgICAgICAgICAgICAgICBlbWFpbFZlcmlmaWVkOiBlbWFpbFZlcmlmaWVkLFxyXG4gICAgICAgICAgICAgICAgICAgIHBob3RvVVJMOiBwaG90b1VSTCxcclxuICAgICAgICAgICAgICAgICAgICBpc0Fub255bW91czogaXNBbm9ueW1vdXMsXHJcbiAgICAgICAgICAgICAgICAgICAgdWlkOiB1aWQsXHJcbiAgICAgICAgICAgICAgICAgICAgcmVmcmVzaFRva2VuOiByZWZyZXNoVG9rZW4sXHJcbiAgICAgICAgICAgICAgICAgICAgcHJvdmlkZXJEYXRhOiBwcm92aWRlckRhdGFcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3F1aWNrc3RhcnQtc2lnbi1pbicpLnRleHRDb250ZW50ID0gJ1NpZ24gaW4gd2l0aCBHb29nbGUnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdxdWlja3N0YXJ0LXNpZ24taW4nKS5kaXNhYmxlZCA9IGZhbHNlO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdxdWlja3N0YXJ0LXNpZ24taW4nKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRvZ2dsZVNpZ25JbiwgZmFsc2UpO1xyXG4gICAgfVxuIiwiKGZ1bmN0aW9uIChnbG8sIGxpYikge1xuICAgIGdsby53YW5kID0gbGliKCk7XG59KHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB0aGlzLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGxpYiA9IHtcbiAgICAgICAgYXBuZHI6IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGEgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIGIgPT09IFwib2JqZWN0XCIgJiYgIUFycmF5LmlzQXJyYXkoYikpIHtcbiAgICAgICAgICAgICAgICBhLmFwcGVuZENoaWxkKGIpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgYSAhPT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJGaXJzdCBwYXJhbWV0ZXIgcGFzc2VkIGlzIG5vdCBhbiBvYmplY3QgZWxlbWVudC5cIik7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBiICE9PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBiID09PSBcInN0cmluZ1wiIHx8IHR5cGVvZiBiID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGEuYXBwZW5kQ2hpbGQodGhpcy50eHQoYikpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShiKSkge1xuICAgICAgICAgICAgICAgIHZhciBhcnIgPSBiO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYXBuZHIoYSwgYXJyW2ldKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJQYXJhbWV0ZXJzIGFyZSBub3QgY29tcGF0aWJsZSBpbiB0aGUgbGliLmFwbmRyIGZ1bmN0aW9uLiAgSGl0IHRoZSBhcnJvdyBvbiB0aGUgbGVmdCBmb3IgY2FsbCBzdGFjay5cIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHF1ZXJBcG5kcjogZnVuY3Rpb24gKGEsIGIsIGMpIHtcbiAgICAgICAgICAgIHZhciBlbGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGEpO1xuICAgICAgICAgICAgaWYgKGVsZSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIk5vIHRhZyBleGlzdHMgaW4gdGhlIERPTS4gSGl0IHRoZSBhcnJvdyBvbiB0aGUgbGVmdCBmb3IgY2FsbCBzdGFjay5cIik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGIpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhcnIgPSBiO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hcG5kcihlbGUsIHRoaXMuY3J0RWxtKGFycltpXSkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYXBuZHIoZWxlLCB0aGlzLmNydEVsbShiLCBjKSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hcG5kcihlbGUsIGIpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBlbGU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHF1ZXJBdHRyOiBmdW5jdGlvbiAoYSwgYiwgYykge1xuICAgICAgICAgICAgdmFyIGVsZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYSk7XG4gICAgICAgICAgICBpZiAoZWxlID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiTm8gdGFnIGV4aXN0cyBpbiB0aGUgRE9NLiBIaXQgdGhlIGFycm93IG9uIHRoZSBsZWZ0IGZvciBjYWxsIHN0YWNrLlwiKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKGIpIHtcbiAgICAgICAgICAgICAgICAgICAgZWxlLnNldEF0dHJpYnV0ZShiLCBjKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHR4dDogZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgYSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgIHJldHVybiBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShhKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGEgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoYS50b1N0cmluZygpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIlBhcmFtZXRlciBwYXNzZWQgdG8gbGliLnR4dCBpcyBub3QgYSBzdHJpbmcgbm9yIGEgbnVtYmVyLiAgSGl0IHRoZSBhcnJvdyBvbiB0aGUgbGVmdCBmb3IgY2FsbCBzdGFjay5cIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNydEVsbTogZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgICAgIHZhciBlbGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGEpLFxuICAgICAgICAgICAgICAgIHR4dDtcbiAgICAgICAgICAgIGlmIChiKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBiID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgICAgIHR4dCA9IHRoaXMudHh0KGIpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmFwbmRyKGVsZSwgdHh0KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiTXVzdCBwYXNzIGEgc3RyaW5nIGFzIHRoZSBzZWNvbmQgcGFyYW0gaW4gbGliLmNydEVsbSBmdW5jdGlvbi4gIEhpdCB0aGUgYXJyb3cgb24gdGhlIGxlZnQgZm9yIGNhbGwgc3RhY2suXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBlbGU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGxpYjtcbn0pKTtcbiIsIihmdW5jdGlvbiAod2luZG93KSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgdmFyIGNvdXJzZV9pZCxcbiAgICAgICAgY291cnNlX2RldGFpbHM7XG5cbiAgICBmdW5jdGlvbiBnZW5lcmF0ZUNvdXJzZVByZXZpZXcoaWQsIGRldGFpbHMpIHtcbiAgICAgICAgdmFyIHNlY3Rpb24gPSB3YW5kLmNydEVsbShcInNlY3Rpb25cIik7XG4gICAgICAgIHZhciBoZWFkZXIgPSB3YW5kLmNydEVsbShcImgyXCIsIGBQcm9qZWN0IE51bWJlciAke2lkfWApO1xuICAgICAgICBoZWFkZXIuY2xhc3NOYW1lID0gXCJjb3Vyc2VUaXRsZVwiO1xuICAgICAgICB3YW5kLmFwbmRyKHNlY3Rpb24sIGhlYWRlcik7XG5cbiAgICAgICAgd2FuZC5xdWVyQXBuZHIoXCJtYWluIGFydGljbGVcIiwgc2VjdGlvbik7XG4gICAgfVxuXG4gICAgd2luZG93LnN0YXJ0Q291cnNlTG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZGF0YWJhc2UucmVmKFwiTWFyaydzIFRvb2xcIikub25jZShcInZhbHVlXCIsIGZ1bmN0aW9uIChzbmFwKSB7XG4gICAgICAgICAgICBzbmFwLmZvckVhY2goZnVuY3Rpb24gKGNzbmFwKSB7XG4gICAgICAgICAgICAgICAgY291cnNlX2RldGFpbHMgPSBjc25hcC52YWwoKTtcbiAgICAgICAgICAgICAgICBjb3Vyc2VfaWQgPSBjc25hcC5rZXk7XG4gICAgICAgICAgICAgICAgZ2VuZXJhdGVDb3Vyc2VQcmV2aWV3KGNvdXJzZV9pZCwgY291cnNlX2RldGFpbHMpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgd2luZG93Lm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgd2luZG93LnN0YXJ0Q291cnNlTG9hZCgpO1xuICAgICAgICBpbml0QXBwKCk7XG4gICAgfVxufSh3aW5kb3cpKTsiLCIoZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG4gICAgdmFyIGFydGljbGUgPSB3YW5kLnF1ZXJBcG5kcihcImFydGljbGVcIik7XHJcblxyXG4gICAgZnVuY3Rpb24gbG9hZFByb2ZpbGUoKSB7XHJcbiAgICAgICAgd2FuZC5xdWVyQXBuZHIoXCJhcnRpY2xlXCIsIFwiaDFcIiwgXCJQcm9maWxlIHdhbnQgdG8gYmUgc2Vlbj8gIE5vdCB5ZXQhXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGxvYWRTdGF0cygpIHtcclxuICAgICAgICB3YW5kLnF1ZXJBcG5kcihcImFydGljbGVcIiwgXCJoMVwiLCBcIlN0YXRzIHdhbnQgdG8gYmUgc2Vlbj8gIE5vdCB5ZXQhXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGxvYWRDaGVja2VkKGlucHV0LCBzZWFyY2hRdWVyKSB7XHJcbiAgICAgICAgZGF0YWJhc2UucmVmKHNlYXJjaFF1ZXIpLm9uY2UoXCJ2YWx1ZVwiLCBmdW5jdGlvbiAoc25hcCkge1xyXG4gICAgICAgICAgICB2YXIgcGVyc29uYWxEYXRhID0gc25hcC52YWwoKTtcclxuICAgICAgICAgICAgaWYgKHBlcnNvbmFsRGF0YS5DaGVja2VkID09PSBcIkZhbHNlXCIpIHtcclxuICAgICAgICAgICAgICAgIGlucHV0LmNoZWNrZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChwZXJzb25hbERhdGEuQ2hlY2tlZCA9PT0gXCJUcnVlXCIpIHtcclxuICAgICAgICAgICAgICAgIGlucHV0LmNoZWNrZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuXHJcbiAgICAgICAgaW5wdXQub25jbGljayA9IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIGlmIChpbnB1dC5jaGVja2VkID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgZGF0YWJhc2UucmVmKHNlYXJjaFF1ZXIpLnVwZGF0ZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJDaGVja2VkXCI6IFwiRmFsc2VcIixcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaW5wdXQuY2hlY2tlZCA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coaW5wdXQsIHNlYXJjaFF1ZXIpO1xyXG4gICAgICAgICAgICAgICAgZGF0YWJhc2UucmVmKHNlYXJjaFF1ZXIpLnVwZGF0ZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJDaGVja2VkXCI6IFwiVHJ1ZVwiLFxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gbG9hZENvbnRlbnRUb2RvKGNwLCBjbikge1xyXG4gICAgICAgIHZhciB0b2RvQ29udGFpbiA9IHdhbmQuY3J0RWxtKFwiZGl2XCIpO1xyXG4gICAgICAgIHRvZG9Db250YWluLmlkID0gXCJ0b2RvQ29udGFpblwiO1xyXG5cclxuICAgICAgICBmb3IgKHZhciBpIGluIGNwKSB7XHJcblxyXG4gICAgICAgICAgICB2YXIgaDMgPSB3YW5kLmNydEVsbShcImgzXCIsIGkpLFxyXG4gICAgICAgICAgICAgICAgdG9kbyA9IHdhbmQuY3J0RWxtKFwiZGl2XCIpLFxyXG4gICAgICAgICAgICAgICAgZGl2c3ViID0gd2FuZC5jcnRFbG0oXCJkaXZcIik7XHJcblxyXG4gICAgICAgICAgICB0b2RvLmlkID0gXCJ0b2RvXCI7XHJcbiAgICAgICAgICAgIGRpdnN1Yi5pZCA9IFwiZGV0YWlsc1wiO1xyXG4gICAgICAgICAgICBkaXZzdWIuc2V0QXR0cmlidXRlKFwiZGlzcGxheVwiLCBcImZhbHNlXCIpO1xyXG5cclxuICAgICAgICAgICAgaWYgKGRpdnN1Yi5nZXRBdHRyaWJ1dGUoXCJkaXNwbGF5XCIpID09PSBcImZhbHNlXCIpIHtcclxuICAgICAgICAgICAgICAgIGRpdnN1Yi5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGZvciAodmFyIGogaW4gY3BbaV0pIHtcclxuICAgICAgICAgICAgICAgIHZhciBzdWJwID0gd2FuZC5jcnRFbG0oXCJsYWJlbFwiLCBgJHtqfSB8IGApLFxyXG4gICAgICAgICAgICAgICAgICAgIGlucHV0ID0gd2FuZC5jcnRFbG0oXCJpbnB1dFwiKSxcclxuICAgICAgICAgICAgICAgICAgICBudW1MaW5rcyA9IHdhbmQudHh0KGAgJHtjcFtpXVtqXVsnTGlua3MgQnJva2VuJ119IGJyb2tlbiBMaW5rcyB8IGApLFxyXG4gICAgICAgICAgICAgICAgICAgIHNlYXJjaFF1ZXIgPSBgTWFyaydzIFRvb2wvJHtjbn0vQ29udGVudCBQYWdlcy8ke2l9LyR7an1gO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBpbnB1dC50eXBlID0gXCJjaGVja2JveFwiO1xyXG5cclxuICAgICAgICAgICAgICAgIGxvYWRDaGVja2VkKGlucHV0LCBzZWFyY2hRdWVyKTtcclxuXHJcbiAgICAgICAgICAgICAgICB3YW5kLmFwbmRyKHN1YnAsIG51bUxpbmtzKTtcclxuICAgICAgICAgICAgICAgIHdhbmQuYXBuZHIoc3VicCwgaW5wdXQpO1xyXG4gICAgICAgICAgICAgICAgd2FuZC5hcG5kcihkaXZzdWIsIHN1YnApO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB3YW5kLmFwbmRyKHRvZG8sIGgzKTtcclxuICAgICAgICAgICAgd2FuZC5hcG5kcih0b2RvQ29udGFpbiwgdG9kbyk7XHJcbiAgICAgICAgICAgIHdhbmQuYXBuZHIodG9kb0NvbnRhaW4sIGRpdnN1Yik7XHJcbiAgICAgICAgICAgIHdhbmQucXVlckFwbmRyKFwiYXJ0aWNsZVwiLCB0b2RvQ29udGFpbik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHF1aXpMb2FkKHEpIHtcclxuICAgICAgICBpZiAocSA9PT0gXCJUaGVyZSBpcyBub3RoaW5nIGhlcmUhXCIpIHtcclxuICAgICAgICAgICAgd2FuZC5xdWVyQXBuZHIoXCJhcnRpY2xlXCIsIFwicFwiLCBgUXVpenplcyBhcmUgb2theSEgJHtxfWApXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJMb2FkIGEgcXVpeiB0YWJsZSBmb3IgdGhlIGNvbnZlcnNpb24hXCIpXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGRpc0xpbmsobCkge1xyXG4gICAgICAgIHZhciBsaW5rID0gd2FuZC5jcnRFbG0oXCJhXCIsIFwiSUwzIExpbmtcIiksXHJcbiAgICAgICAgICAgIHBhcmEgPSB3YW5kLmNydEVsbShcInBcIik7XHJcbiAgICAgICAgbGluay5ocmVmID0gbDtcclxuICAgICAgICB3YW5kLmFwbmRyKHBhcmEsIGxpbmspO1xyXG5cclxuICAgICAgICB3YW5kLnF1ZXJBcG5kcihcImFydGljbGVcIiwgcGFyYSk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZGlzcGxheURldGFpbHMoY2QsIGNuKSB7XHJcbiAgICAgICAgZGlzTGluayhjZC5MaW5rKTtcclxuICAgICAgICBxdWl6TG9hZChjZC5RdWl6emVzKTtcclxuICAgICAgICBsb2FkQ29udGVudFRvZG8oY2RbXCJDb250ZW50IFBhZ2VzXCJdLCBjbik7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gbG9hZENvdXJzZURldGFpbHMoZSkge1xyXG4gICAgICAgIHZhciBjb3Vyc2VOdW0gPSBlLnRhcmdldC5pbm5lclRleHQuc3BsaXQoXCJQcm9qZWN0IE51bWJlciBcIilbMV0sXHJcbiAgICAgICAgICAgIGNvdXJzZURldGFpbHM7XHJcblxyXG4gICAgICAgIGRhdGFiYXNlLnJlZihgTWFyaydzIFRvb2wvJHtjb3Vyc2VOdW19YCkub25jZShcInZhbHVlXCIsIGZ1bmN0aW9uIChzbmFwKSB7XHJcbiAgICAgICAgICAgIGNvdXJzZURldGFpbHMgPSBzbmFwLnZhbCgpO1xyXG4gICAgICAgICAgICBkaXNwbGF5RGV0YWlscyhjb3Vyc2VEZXRhaWxzLCBjb3Vyc2VOdW0pO1xyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gY2xlYXJBcnRpY2xlKCkge1xyXG4gICAgICAgIGFydGljbGUuaW5uZXJIVE1MID0gXCJcIjtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBkcm9wZG93bihkaXNCb29sLCBuZXh0U2liKSB7XHJcbiAgICAgICAgaWYgKGRpc0Jvb2wgPT09IFwiZmFsc2VcIikge1xyXG4gICAgICAgICAgICBuZXh0U2liLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XHJcbiAgICAgICAgICAgIG5leHRTaWIuc2V0QXR0cmlidXRlKFwiZGlzcGxheVwiLCBcInRydWVcIik7XHJcbiAgICAgICAgfSBlbHNlIGlmIChkaXNCb29sID09PSBcInRydWVcIikge1xyXG4gICAgICAgICAgICBuZXh0U2liLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcclxuICAgICAgICAgICAgbmV4dFNpYi5zZXRBdHRyaWJ1dGUoXCJkaXNwbGF5XCIsIFwiZmFsc2VcIik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGRvY3VtZW50Lm9uY2xpY2sgPSBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgIHZhciBwcm9qZWN0ID0gZS50YXJnZXQuaW5uZXJUZXh0LmluZGV4T2YoXCJQcm9qZWN0XCIpID4gLTEsXHJcbiAgICAgICAgICAgIGgybG9jYWwgPSBlLnRhcmdldC5sb2NhbE5hbWUgPT09IFwiaDJcIixcclxuICAgICAgICAgICAgYnV0dG9ubG9jYWwgPSBlLnRhcmdldC5sb2NhbE5hbWUgPT09IFwiYnV0dG9uXCIsXHJcbiAgICAgICAgICAgIGhvbWUgPSBlLnRhcmdldC5pbm5lclRleHQuaW5kZXhPZihcIkhvbWVcIikgPiAtMSxcclxuICAgICAgICAgICAgcHJvZmlsZSA9IGUudGFyZ2V0LmlubmVyVGV4dC5pbmRleE9mKFwiUHJvZmlsZVwiKSA+IC0xLFxyXG4gICAgICAgICAgICBzdGF0cyA9IGUudGFyZ2V0LmlubmVyVGV4dC5pbmRleE9mKFwiU3RhdHNcIikgPiAtMSxcclxuICAgICAgICAgICAgaDNsb2NhbCA9IGUudGFyZ2V0LmxvY2FsTmFtZSxcclxuICAgICAgICAgICAgbGVzc29uTnVtID0gZS50YXJnZXQuaW5uZXJUZXh0LmluZGV4T2YoXCJMZXNzb25cIikgPiAtMSB8fCBlLnRhcmdldC5pbm5lclRleHQuaW5kZXhPZihcIk1vZHVsZVwiKSA+IC0xIHx8IGUudGFyZ2V0LmlubmVyVGV4dC5pbmRleE9mKFwiV2VsY29tZVwiKSA+IC0xLFxyXG4gICAgICAgICAgICBjaGVja2VkID0gZS50YXJnZXQudHlwZSA9PT0gXCJjaGVja2JveFwiO1xyXG4gICAgICAgIFxyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhoM2xvY2FsLCBsZXNzb25OdW0pO1xyXG5cclxuICAgICAgICBpZiAocHJvamVjdCAmJiBoMmxvY2FsKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiUHJvamVjdCBDbGlja2VkIVwiKTtcclxuICAgICAgICAgICAgY2xlYXJBcnRpY2xlKCk7XHJcbiAgICAgICAgICAgIGxvYWRDb3Vyc2VEZXRhaWxzKGUpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoaG9tZSAmJiBidXR0b25sb2NhbCkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIkhvbWUgQ2xpY2tlZCFcIik7XHJcbiAgICAgICAgICAgIGNsZWFyQXJ0aWNsZSgpO1xyXG4gICAgICAgICAgICB3aW5kb3cuc3RhcnRDb3Vyc2VMb2FkKCk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChwcm9maWxlICYmIGJ1dHRvbmxvY2FsKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiUHJvZmlsZSBjbGlja2VkIVwiKTtcclxuICAgICAgICAgICAgY2xlYXJBcnRpY2xlKCk7XHJcbiAgICAgICAgICAgIGxvYWRQcm9maWxlKCk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChzdGF0cyAmJiBidXR0b25sb2NhbCkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIlN0YXRzIGNsaWNrZWQhXCIpO1xyXG4gICAgICAgICAgICBjbGVhckFydGljbGUoKTtcclxuICAgICAgICAgICAgbG9hZFN0YXRzKCk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChoM2xvY2FsICYmIGxlc3Nvbk51bSkgeyAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB2YXIgbmV4dFNpYiA9IGUudGFyZ2V0LnBhcmVudEVsZW1lbnQubmV4dEVsZW1lbnRTaWJsaW5nLFxyXG4gICAgICAgICAgICAgICAgZGlzQm9vbCA9IG5leHRTaWIuZ2V0QXR0cmlidXRlKFwiZGlzcGxheVwiKTtcclxuICAgICAgICAgICAgZHJvcGRvd24oZGlzQm9vbCwgbmV4dFNpYik7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbn0oKSk7XHJcbiIsIihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgdmFyIG5hdmlnID0ge1xyXG4gICAgICAgIGhvbWU6IFwiSG9tZVwiLFxyXG4gICAgICAgIHByb2ZpbGU6IFwiTXkgUHJvZmlsZVwiLFxyXG4gICAgICAgIHN0YXRzOiBcIlN0YXRzXCJcclxuICAgIH1cclxuXHJcbiAgICBmb3IgKHZhciBpIGluIG5hdmlnKSB7XHJcbiAgICAgICAgd2FuZC5xdWVyQXBuZHIoXCJuYXZcIiwgXCJidXR0b25cIiwgbmF2aWdbaV0pO1xyXG4gICAgfVxyXG5cclxufSgpKTtcclxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
