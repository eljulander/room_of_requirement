"use strict";var config={apiKey:"AIzaSyCRfRp20kEkpwO1Bs30sDyBkC4Qf-rsuNM",authDomain:"course-file-auditor.firebaseapp.com",databaseURL:"https://course-file-auditor.firebaseio.com",storageBucket:"course-file-auditor.appspot.com"};firebase.initializeApp(config);var database=firebase.database();
"use strict";!function(){function e(){if(firebase.auth().currentUser)localStorage.removeItem("ManagementAuthO"),firebase.auth().signOut();else{var e=new firebase.auth.GoogleAuthProvider;e.addScope("https://www.googleapis.com/auth/plus.login"),e.addScope("profile"),e.addScope("email"),firebase.auth().signInWithRedirect(e)}document.getElementById("quickstart-sign-in").disabled=!0}function t(e,t){database.ref("users").once("value",function(i){i.forEach(function(i){i.key===e&&(i.val().role||t())})})}function i(){firebase.auth().getRedirectResult().then(function(e){if(e.credential){var t=e.credential.accessToken;location.reload(),console.log(t)}e.user})["catch"](function(e){var t=e.code;e.message,e.email,e.credential;"auth/account-exists-with-different-credential"===t?alert("You have already signed up with a different auth provider for that email."):console.error(e)}),firebase.auth().onAuthStateChanged(function(e){if(e){var i={displayName:e.displayName,email:e.email,emailVerified:e.emailVerified,photoURL:e.photoURL,uid:e.uid};document.getElementById("quickstart-sign-in").textContent="Sign out",database.ref("users/"+i.uid).update({displayName:i.displayName,email:i.email,emailVerified:i.emailVerified,photoURL:i.photoURL,uid:i.uid}),t(i.uid,function(){database.ref("users/"+i.uid).update({role:0})}),localStorage.ManagementAuthO=JSON.stringify(i)}else document.getElementById("quickstart-sign-in").textContent="Sign in with Google";document.getElementById("quickstart-sign-in").disabled=!1}),document.getElementById("quickstart-sign-in").addEventListener("click",e,!1)}window.onload=function(){i()}}();
"use strict";!function(){function n(n,e){var a=$("#unassigned"),o=$("<div id='assignmentContainer'></div>"),i=$('<p><a href="'+n.Link+'">'+e+"</a></p>");o.append(i),a.append(o),console.log(n,e)}function e(){database.ref("Mark's Tool").once("value",function(e){e.forEach(function(e){var a=e.val(),o=e.key,i="There is nothing here!";a["Content Pages"]===i&&a.Quizzes===i||n(a,o)})})}function a(){console.log("finished")}function o(){console.log("dataSaved")}function i(){console.log("timeSpent")}$("a").click(function(n){var e=n.target.className;$("#"+e).css({display:"block"}),$("#shade").css({display:"block"})}),$(".cancel").click(function(n){var e=n.target.parentElement;$(e).css({display:"none"}),$("#shade").css({display:"none"})}),location.pathname.includes("admin")&&(e(),a(),o(),i())}();
"use strict";!function(){var n,o,t=JSON.parse(localStorage.ManagementAuthO),i=$("nav"),a=$("<button>Home</button>");a.click(function(n){var o=location.origin;location.assign(o+"/index.html")}),i.append(a),database.ref("users/"+t.uid).once("value",function(t){n=t.val().role,o=$("<button>Admin</button>"),n>=8&&(console.log("User logged in is Administrator"),o.click(function(n){console.log("li");var o=n.target.innerText.toLowerCase(),t=location.origin;location.assign(t+"/"+o+".html")}),i.append(o))})}();
//# sourceMappingURL=data:application/json;base64,
